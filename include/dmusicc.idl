/* DirectMusic Core API Stuff
 *
 * Copyright (C) 2003-2004 Rok Mandeljc
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA
 */

import "unknwn.idl";
import "objidl.idl";
import "wtypes.idl";
import "strmif.idl";
import "mmreg.h";

import "dmerror.h";
import "dmusbuff.h";

cpp_quote("#include <dsound.h>")
interface IDirectSound;
interface IDirectSoundBuffer;

typedef struct _OVERLAPPED OVERLAPPED;

cpp_quote("DEFINE_GUID(CLSID_DirectMusic,                    0x636b9f10,0x0c7d,0x11d1,0x95,0xb2,0x00,0x20,0xaf,0xdc,0x74,0x21);")
cpp_quote("DEFINE_GUID(CLSID_DirectMusicCollection,          0x480ff4b0,0x28b2,0x11d1,0xbe,0xf7,0x00,0xc0,0x4f,0xbf,0x8f,0xef);")
cpp_quote("DEFINE_GUID(CLSID_DirectMusicSynth,               0x58c2b4d0,0x46e7,0x11d1,0x89,0xac,0x00,0xa0,0xc9,0x05,0x41,0x29);")

cpp_quote("DEFINE_GUID(GUID_DMUS_PROP_GM_Hardware,           0x178f2f24,0xc364,0x11d1,0xa7,0x60,0x00,0x00,0xf8,0x75,0xac,0x12);")
cpp_quote("DEFINE_GUID(GUID_DMUS_PROP_GS_Capable,            0x6496aba2,0x61b0,0x11d2,0xaf,0xa6,0x00,0xaa,0x00,0x24,0xd8,0xb6);")
cpp_quote("DEFINE_GUID(GUID_DMUS_PROP_GS_Hardware,           0x178f2f25,0xc364,0x11d1,0xa7,0x60,0x00,0x00,0xf8,0x75,0xac,0x12);")
cpp_quote("DEFINE_GUID(GUID_DMUS_PROP_DLS1,                  0x178f2f27,0xc364,0x11d1,0xa7,0x60,0x00,0x00,0xf8,0x75,0xac,0x12);")
cpp_quote("DEFINE_GUID(GUID_DMUS_PROP_DLS2,                  0xf14599e5,0x4689,0x11d2,0xaf,0xa6,0x00,0xaa,0x00,0x24,0xd8,0xb6);")
cpp_quote("DEFINE_GUID(GUID_DMUS_PROP_Effects,               0xcda8d611,0x684a,0x11d2,0x87,0x1e,0x00,0x60,0x08,0x93,0xb1,0xbd);")
cpp_quote("DEFINE_GUID(GUID_DMUS_PROP_INSTRUMENT2,           0x865fd372,0x9f67,0x11d2,0x87,0x2a,0x00,0x60,0x08,0x93,0xb1,0xbd);")
cpp_quote("DEFINE_GUID(GUID_DMUS_PROP_LegacyCaps,            0xcfa7cdc2,0x00a1,0x11d2,0xaa,0xd5,0x00,0x00,0xf8,0x75,0xac,0x12);")
cpp_quote("DEFINE_GUID(GUID_DMUS_PROP_MemorySize,            0x178f2f28,0xc364,0x11d1,0xa7,0x60,0x00,0x00,0xf8,0x75,0xac,0x12);")
cpp_quote("DEFINE_GUID(GUID_DMUS_PROP_SampleMemorySize,      0x178f2f28,0xc364,0x11d1,0xa7,0x60,0x00,0x00,0xf8,0x75,0xac,0x12);")
cpp_quote("DEFINE_GUID(GUID_DMUS_PROP_SamplePlaybackRate,    0x2a91f713,0xa4bf,0x11d2,0xbb,0xdf,0x00,0x60,0x08,0x33,0xdb,0xd8);")
cpp_quote("DEFINE_GUID(GUID_DMUS_PROP_SynthSink_DSOUND,      0x0aa97844,0xc877,0x11d1,0x87,0x0c,0x00,0x60,0x08,0x93,0xb1,0xbd);")
cpp_quote("DEFINE_GUID(GUID_DMUS_PROP_SynthSink_WAVE,        0x0aa97845,0xc877,0x11d1,0x87,0x0c,0x00,0x60,0x08,0x93,0xb1,0xbd);")
cpp_quote("DEFINE_GUID(GUID_DMUS_PROP_Volume,                0xfedfae25,0xe46e,0x11d1,0xaa,0xce,0x00,0x00,0xf8,0x75,0xac,0x12);")
cpp_quote("DEFINE_GUID(GUID_DMUS_PROP_WavesReverb,           0x04cb5622,0x32e5,0x11d2,0xaf,0xa6,0x00,0xaa,0x00,0x24,0xd8,0xb6);")
cpp_quote("DEFINE_GUID(GUID_DMUS_PROP_WriteLatency,          0x268a0fa0,0x60f2,0x11d2,0xaf,0xa6,0x00,0xaa,0x00,0x24,0xd8,0xb6);")
cpp_quote("DEFINE_GUID(GUID_DMUS_PROP_WritePeriod,           0x268a0fa1,0x60f2,0x11d2,0xaf,0xa6,0x00,0xaa,0x00,0x24,0xd8,0xb6);")
cpp_quote("DEFINE_GUID(GUID_DMUS_PROP_XG_Capable,            0x6496aba1,0x61b0,0x11d2,0xaf,0xa6,0x00,0xaa,0x00,0x24,0xd8,0xb6);")
cpp_quote("DEFINE_GUID(GUID_DMUS_PROP_XG_Hardware,           0x178f2f26,0xc364,0x11d1,0xa7,0x60,0x00,0x00,0xf8,0x75,0xac,0x12);	")

typedef ULONGLONG    SAMPLE_TIME, *LPSAMPLE_TIME;
typedef ULONGLONG    SAMPLE_POSITION, *LPSAMPLE_POSITION;	

cpp_quote("#define DAUD_CRITICAL_VOICE_PRIORITY 0xF0000000")
cpp_quote("#define DAUD_HIGH_VOICE_PRIORITY     0xC0000000")
cpp_quote("#define DAUD_STANDARD_VOICE_PRIORITY 0x80000000")
cpp_quote("#define DAUD_LOW_VOICE_PRIORITY      0x40000000")
cpp_quote("#define DAUD_PERSIST_VOICE_PRIORITY  0x10000000")

cpp_quote("#define DAUD_CHAN1_VOICE_PRIORITY_OFFSET  0x0000000E")
cpp_quote("#define DAUD_CHAN2_VOICE_PRIORITY_OFFSET  0x0000000D")
cpp_quote("#define DAUD_CHAN3_VOICE_PRIORITY_OFFSET  0x0000000C")
cpp_quote("#define DAUD_CHAN4_VOICE_PRIORITY_OFFSET  0x0000000B")
cpp_quote("#define DAUD_CHAN5_VOICE_PRIORITY_OFFSET  0x0000000A")
cpp_quote("#define DAUD_CHAN6_VOICE_PRIORITY_OFFSET  0x00000009")
cpp_quote("#define DAUD_CHAN7_VOICE_PRIORITY_OFFSET  0x00000008")
cpp_quote("#define DAUD_CHAN8_VOICE_PRIORITY_OFFSET  0x00000007")
cpp_quote("#define DAUD_CHAN9_VOICE_PRIORITY_OFFSET  0x00000006")
cpp_quote("#define DAUD_CHAN10_VOICE_PRIORITY_OFFSET 0x0000000F")
cpp_quote("#define DAUD_CHAN11_VOICE_PRIORITY_OFFSET 0x00000005")
cpp_quote("#define DAUD_CHAN12_VOICE_PRIORITY_OFFSET 0x00000004")
cpp_quote("#define DAUD_CHAN13_VOICE_PRIORITY_OFFSET 0x00000003")
cpp_quote("#define DAUD_CHAN14_VOICE_PRIORITY_OFFSET 0x00000002")
cpp_quote("#define DAUD_CHAN15_VOICE_PRIORITY_OFFSET 0x00000001")
cpp_quote("#define DAUD_CHAN16_VOICE_PRIORITY_OFFSET 0x00000000")

cpp_quote("#define DAUD_CHAN1_DEF_VOICE_PRIORITY  (DAUD_STANDARD_VOICE_PRIORITY | DAUD_CHAN1_VOICE_PRIORITY_OFFSET)")
cpp_quote("#define DAUD_CHAN2_DEF_VOICE_PRIORITY  (DAUD_STANDARD_VOICE_PRIORITY | DAUD_CHAN2_VOICE_PRIORITY_OFFSET)")
cpp_quote("#define DAUD_CHAN3_DEF_VOICE_PRIORITY  (DAUD_STANDARD_VOICE_PRIORITY | DAUD_CHAN3_VOICE_PRIORITY_OFFSET)")
cpp_quote("#define DAUD_CHAN4_DEF_VOICE_PRIORITY  (DAUD_STANDARD_VOICE_PRIORITY | DAUD_CHAN4_VOICE_PRIORITY_OFFSET)")
cpp_quote("#define DAUD_CHAN5_DEF_VOICE_PRIORITY  (DAUD_STANDARD_VOICE_PRIORITY | DAUD_CHAN5_VOICE_PRIORITY_OFFSET)")
cpp_quote("#define DAUD_CHAN6_DEF_VOICE_PRIORITY  (DAUD_STANDARD_VOICE_PRIORITY | DAUD_CHAN6_VOICE_PRIORITY_OFFSET)")
cpp_quote("#define DAUD_CHAN7_DEF_VOICE_PRIORITY  (DAUD_STANDARD_VOICE_PRIORITY | DAUD_CHAN7_VOICE_PRIORITY_OFFSET)")
cpp_quote("#define DAUD_CHAN8_DEF_VOICE_PRIORITY  (DAUD_STANDARD_VOICE_PRIORITY | DAUD_CHAN8_VOICE_PRIORITY_OFFSET)")
cpp_quote("#define DAUD_CHAN9_DEF_VOICE_PRIORITY  (DAUD_STANDARD_VOICE_PRIORITY | DAUD_CHAN9_VOICE_PRIORITY_OFFSET)")
cpp_quote("#define DAUD_CHAN10_DEF_VOICE_PRIORITY (DAUD_STANDARD_VOICE_PRIORITY | DAUD_CHAN10_VOICE_PRIORITY_OFFSET)")
cpp_quote("#define DAUD_CHAN11_DEF_VOICE_PRIORITY (DAUD_STANDARD_VOICE_PRIORITY | DAUD_CHAN11_VOICE_PRIORITY_OFFSET)")
cpp_quote("#define DAUD_CHAN12_DEF_VOICE_PRIORITY (DAUD_STANDARD_VOICE_PRIORITY | DAUD_CHAN12_VOICE_PRIORITY_OFFSET)")
cpp_quote("#define DAUD_CHAN13_DEF_VOICE_PRIORITY (DAUD_STANDARD_VOICE_PRIORITY | DAUD_CHAN13_VOICE_PRIORITY_OFFSET)")
cpp_quote("#define DAUD_CHAN14_DEF_VOICE_PRIORITY (DAUD_STANDARD_VOICE_PRIORITY | DAUD_CHAN14_VOICE_PRIORITY_OFFSET)")
cpp_quote("#define DAUD_CHAN15_DEF_VOICE_PRIORITY (DAUD_STANDARD_VOICE_PRIORITY | DAUD_CHAN15_VOICE_PRIORITY_OFFSET)")
cpp_quote("#define DAUD_CHAN16_DEF_VOICE_PRIORITY (DAUD_STANDARD_VOICE_PRIORITY | DAUD_CHAN16_VOICE_PRIORITY_OFFSET)")

cpp_quote("#define DMUS_CLOCKF_GLOBAL 0x1")

cpp_quote("#define DMUS_EFFECT_NONE   0x0")
cpp_quote("#define DMUS_EFFECT_REVERB 0x1")
cpp_quote("#define DMUS_EFFECT_CHORUS 0x2")
cpp_quote("#define DMUS_EFFECT_DELAY  0x4")

#define DMUS_MAX_DESCRIPTION 0x80
cpp_quote("#define DMUS_MAX_DESCRIPTION 0x80")
cpp_quote("#define DMUS_MAX_DRIVER 0x80")

cpp_quote("#define DMUS_PC_INPUTCLASS  0x0")
cpp_quote("#define DMUS_PC_OUTPUTCLASS 0x1")

cpp_quote("#define DMUS_PC_DLS             0x00000001")
cpp_quote("#define DMUS_PC_EXTERNAL        0x00000002")
cpp_quote("#define DMUS_PC_SOFTWARESYNTH   0x00000004")
cpp_quote("#define DMUS_PC_MEMORYSIZEFIXED 0x00000008")
cpp_quote("#define DMUS_PC_GMINHARDWARE    0x00000010")
cpp_quote("#define DMUS_PC_GSINHARDWARE    0x00000020")
cpp_quote("#define DMUS_PC_XGINHARDWARE    0x00000040")
cpp_quote("#define DMUS_PC_DIRECTSOUND     0x00000080")
cpp_quote("#define DMUS_PC_SHAREABLE       0x00000100")
cpp_quote("#define DMUS_PC_DLS2            0x00000200")
cpp_quote("#define DMUS_PC_AUDIOPATH       0x00000400")
cpp_quote("#define DMUS_PC_WAVE            0x00000800")
cpp_quote("#define DMUS_PC_SYSTEMMEMORY    0x7FFFFFFF")

cpp_quote("#define DMUS_PORT_WINMM_DRIVER    0x0")
cpp_quote("#define DMUS_PORT_USER_MODE_SYNTH 0x1")
cpp_quote("#define DMUS_PORT_KERNEL_MODE     0x2")

cpp_quote("#define DMUS_PORT_FEATURE_AUDIOPATH     0x1")
cpp_quote("#define DMUS_PORT_FEATURE_STREAMING     0x2")

cpp_quote("#define DMUS_PORTPARAMS_VOICES           0x01")
cpp_quote("#define DMUS_PORTPARAMS_CHANNELGROUPS    0x02")
cpp_quote("#define DMUS_PORTPARAMS_AUDIOCHANNELS    0x04")
cpp_quote("#define DMUS_PORTPARAMS_SAMPLERATE       0x08")
cpp_quote("#define DMUS_PORTPARAMS_EFFECTS          0x20")
cpp_quote("#define DMUS_PORTPARAMS_SHARE            0x40")
cpp_quote("#define DMUS_PORTPARAMS_FEATURES         0x80")

cpp_quote("#define DMUS_VOLUME_MAX     2000")
cpp_quote("#define DMUS_VOLUME_MIN   -20000")

cpp_quote("#define DMUS_SYNTHSTATS_VOICES        0x01")
cpp_quote("#define DMUS_SYNTHSTATS_TOTAL_CPU     0x02")
cpp_quote("#define DMUS_SYNTHSTATS_CPU_PER_VOICE 0x04")
cpp_quote("#define DMUS_SYNTHSTATS_LOST_NOTES    0x08")
cpp_quote("#define DMUS_SYNTHSTATS_PEAK_VOLUME   0x10")
cpp_quote("#define DMUS_SYNTHSTATS_FREE_MEMORY   0x20")
cpp_quote("#define DMUS_SYNTHSTATS_SYSTEMMEMORY  DMUS_PC_SYSTEMMEMORY")

cpp_quote("#define DSBUSID_FIRST_SPKR_LOC        0x00000000")
cpp_quote("#define DSBUSID_FRONT_LEFT            0x00000000")
cpp_quote("#define DSBUSID_LEFT                  0x00000000")
cpp_quote("#define DSBUSID_FRONT_RIGHT           0x00000001")
cpp_quote("#define DSBUSID_RIGHT                 0x00000001")
cpp_quote("#define DSBUSID_FRONT_CENTER          0x00000002")
cpp_quote("#define DSBUSID_LOW_FREQUENCY         0x00000003")
cpp_quote("#define DSBUSID_BACK_LEFT             0x00000004")
cpp_quote("#define DSBUSID_BACK_RIGHT            0x00000005")
cpp_quote("#define DSBUSID_FRONT_LEFT_OF_CENTER  0x00000006 ")
cpp_quote("#define DSBUSID_FRONT_RIGHT_OF_CENTER 0x00000007")
cpp_quote("#define DSBUSID_BACK_CENTER           0x00000008")
cpp_quote("#define DSBUSID_SIDE_LEFT             0x00000009")
cpp_quote("#define DSBUSID_SIDE_RIGHT            0x0000000A")
cpp_quote("#define DSBUSID_TOP_CENTER            0x0000000B")
cpp_quote("#define DSBUSID_TOP_FRONT_LEFT        0x0000000C")
cpp_quote("#define DSBUSID_TOP_FRONT_CENTER      0x0000000D")
cpp_quote("#define DSBUSID_TOP_FRONT_RIGHT       0x0000000E")
cpp_quote("#define DSBUSID_TOP_BACK_LEFT         0x0000000F")
cpp_quote("#define DSBUSID_TOP_BACK_CENTER       0x00000010")
cpp_quote("#define DSBUSID_TOP_BACK_RIGHT        0x011")
cpp_quote("#define DSBUSID_LAST_SPKR_LOC         0x00000011")
cpp_quote("#define DSBUSID_IS_SPKR_LOC(id)       (((id) >= DSBUSID_FIRST_SPKR_LOC) && ((id) <= DSBUSID_LAST_SPKR_LOC))")

cpp_quote("#define DSBUSID_REVERB_SEND           0x00000040")
cpp_quote("#define DSBUSID_CHORUS_SEND           0x00000041")

cpp_quote("#define DSBUSID_DYNAMIC_0             0x00000200 ")

cpp_quote("#define DSBUSID_NULL			      0xFFFFFFFF")

/*****************************************************************************
 * Enumerations
 */
typedef enum {
	DMUS_CLOCK_SYSTEM = 0x0,
	DMUS_CLOCK_WAVE   = 0x1
} DMUS_CLOCKTYPE;


/*****************************************************************************
 * Structures
 */
typedef struct _DMUS_BUFFERDESC          DMUS_BUFFERDESC,          *LPDMUS_BUFFERDESC;
typedef struct _DMUS_PORTCAPS            DMUS_PORTCAPS,            *LPDMUS_PORTCAPS;
typedef struct _DMUS_PORTPARAMS          DMUS_PORTPARAMS7,         *LPDMUS_PORTPARAMS7;
typedef struct _DMUS_PORTPARAMS8         DMUS_PORTPARAMS8,         *LPDMUS_PORTPARAMS8;
typedef         DMUS_PORTPARAMS8         DMUS_PORTPARAMS,          *LPDMUS_PORTPARAMS;
typedef struct _DMUS_SYNTHSTATS          DMUS_SYNTHSTATS,          *LPDMUS_SYNTHSTATS;
typedef struct _DMUS_SYNTHSTATS8         DMUS_SYNTHSTATS8,         *LPDMUS_SYNTHSTATS8;
typedef struct _DMUS_WAVES_REVERB_PARAMS DMUS_WAVES_REVERB_PARAMS, *LPDMUS_WAVES_REVERB_PARAMS;
typedef struct _DMUS_CLOCKINFO7          DMUS_CLOCKINFO7,          *LPDMUS_CLOCKINFO7;
typedef struct _DMUS_CLOCKINFO8          DMUS_CLOCKINFO8,          *LPDMUS_CLOCKINFO8;
typedef         DMUS_CLOCKINFO8          DMUS_CLOCKINFO,           *LPDMUS_CLOCKINFO;

struct _DMUS_BUFFERDESC {
	DWORD dwSize;
	DWORD dwFlags;
	GUID guidBufferFormat;
	DWORD cbBuffer;
} ;

struct _DMUS_PORTCAPS {
	DWORD dwSize;
	DWORD dwFlags;
	GUID  guidPort;
	DWORD dwClass;
	DWORD dwType;
	DWORD dwMemorySize;
	DWORD dwMaxChannelGroups;
	DWORD dwMaxVoices;    
	DWORD dwMaxAudioChannels;
	DWORD dwEffectFlags;
	WCHAR wszDescription[DMUS_MAX_DESCRIPTION];
};

struct _DMUS_PORTPARAMS {
	DWORD dwSize;
	DWORD dwValidParams;
	DWORD dwVoices;
	DWORD dwChannelGroups;
	DWORD dwAudioChannels;
	DWORD dwSampleRate;
	DWORD dwEffectFlags;
	BOOL  fShare;
};

struct _DMUS_PORTPARAMS8 {
	DWORD dwSize;
	DWORD dwValidParams;
	DWORD dwVoices;
	DWORD dwChannelGroups;
	DWORD dwAudioChannels;
	DWORD dwSampleRate;
	DWORD dwEffectFlags;
	BOOL  fShare;
	DWORD dwFeatures;
};

struct _DMUS_SYNTHSTATS {
	DWORD dwSize;
	DWORD dwValidStats;
	DWORD dwVoices;
	DWORD dwTotalCPU;
	DWORD dwCPUPerVoice;
	DWORD dwLostNotes;
	DWORD dwFreeMemory;
	LONG  lPeakVolume;
};

struct _DMUS_SYNTHSTATS8 {
	DWORD dwSize;
	DWORD dwValidStats;
	DWORD dwVoices;
	DWORD dwTotalCPU;
	DWORD dwCPUPerVoice;
	DWORD dwLostNotes;
	DWORD dwFreeMemory;
	LONG  lPeakVolume;
	DWORD dwSynthMemUse;
};

struct _DMUS_WAVES_REVERB_PARAMS {
	float fInGain;
	float fReverbMix;
	float fReverbTime;
	float fHighFreqRTRatio;
};

struct _DMUS_CLOCKINFO7 {
	DWORD          dwSize;
	DMUS_CLOCKTYPE ctType;
	GUID           guidClock;
	WCHAR          wszDescription[DMUS_MAX_DESCRIPTION];
};

struct _DMUS_CLOCKINFO8 {
    DWORD          dwSize;
    DMUS_CLOCKTYPE ctType;
    GUID           guidClock;
    WCHAR          wszDescription[DMUS_MAX_DESCRIPTION];
    DWORD          dwFlags;           
};

interface IDirectMusic;
interface IDirectMusic8;
interface IDirectMusicBuffer;
interface IDirectMusicInstrument;
interface IDirectMusicDownloadedInstrument;
interface IDirectMusicCollection;
interface IDirectMusicDownload;
interface IDirectMusicPortDownload;
interface IDirectMusicPort;
interface IDirectMusicThru;

[local, object, uuid(6536115a-7b2d-11d2-ba18-0000f875ac12)]
interface IDirectMusic : IUnknown
{
    HRESULT EnumPort(DWORD dwIndex, LPDMUS_PORTCAPS pPortCaps);
    HRESULT CreateMusicBuffer(LPDMUS_BUFFERDESC pBufferDesc, IDirectMusicBuffer **ppBuffer, LPUNKNOWN pUnkOuter);
    HRESULT CreatePort(REFCLSID rclsidPort, LPDMUS_PORTPARAMS pPortParams, IDirectMusicPort **ppPort, LPUNKNOWN pUnkOuter);
    HRESULT EnumMasterClock(DWORD dwIndex, LPDMUS_CLOCKINFO lpClockInfo);
    HRESULT GetMasterClock(LPGUID pguidClock, IReferenceClock **ppReferenceClock);
    HRESULT SetMasterClock(REFGUID rguidClock);
    HRESULT Activate(BOOL fEnable);
    HRESULT GetDefaultPort(LPGUID pguidPort);
    HRESULT SetDirectSound(IDirectSound *pDirectSound, HWND hWnd);
};
typedef IDirectMusic *LPDIRECTMUSIC;

[local, object, uuid(2d3629f7-813d-4939-8508-f05c6b75fd97)]
interface IDirectMusic8 : IDirectMusic
{
    HRESULT SetExternalMasterClock(IReferenceClock *pClock);
};
typedef IDirectMusic8 *LPDIRECTMUSIC8;
cpp_quote("DEFINE_GUID(IID_IDirectMusic2, 0x6fc2cae1,0xbc78,0x11d2,0xaf,0xa6,0x00,0xaa,0x00,0x24,0xd8,0xb6);")

[local, object, uuid(d2ac2878-b39b-11d1-8704-00600893b1bd)]
interface IDirectMusicBuffer : IUnknown
{
    HRESULT Flush();
    HRESULT TotalTime(REFERENCE_TIME *prtTime);
    HRESULT PackStructured(REFERENCE_TIME rt, DWORD dwChannelGroup, DWORD dwChannelMessage);
    HRESULT PackUnstructured(REFERENCE_TIME rt, DWORD dwChannelGroup, DWORD cb, BYTE *lpb);
    HRESULT ResetReadPtr();
    HRESULT GetNextEvent(REFERENCE_TIME *prt, LPDWORD pdwChannelGroup, LPDWORD pdwLength, BYTE **ppData);
    HRESULT GetRawBufferPtr(BYTE **ppData);
    HRESULT GetStartTime(REFERENCE_TIME *prt);
    HRESULT GetUsedBytes(LPDWORD pcb);
    HRESULT GetMaxBytes(LPDWORD pcb);
    HRESULT GetBufferFormat(LPGUID pGuidFormat);
    HRESULT SetStartTime(REFERENCE_TIME rt);
    HRESULT SetUsedBytes(DWORD cb);
};
typedef IDirectMusicBuffer *LPDIRECTMUSICBUFFER;
typedef IDirectMusicBuffer IDirectMusicBuffer8, *LPDIRECTMUSICBUFFER8;

[local, object, uuid(d2ac287d-b39b-11d1-8704-00600893b1bd)]
interface IDirectMusicInstrument : IUnknown
{
    HRESULT GetPatch(DWORD *pdwPatch);
    HRESULT SetPatch(DWORD dwPatch);
};

[local, object, uuid(d2ac287e-b39b-11d1-8704-00600893b1bd)]
interface IDirectMusicDownloadedInstrument : IUnknown
{
};

[local, object, uuid(d2ac287c-b39b-11d1-8704-00600893b1bd)]
interface IDirectMusicCollection : IUnknown
{
    HRESULT GetInstrument(DWORD dwPatch, IDirectMusicInstrument **ppInstrument);
    HRESULT EnumInstrument(DWORD dwIndex, DWORD *pdwPatch, LPWSTR pwszName, DWORD dwNameLen);
};

[local, object, uuid(d2ac287b-b39b-11d1-8704-00600893b1bd)]
interface IDirectMusicDownload : IUnknown
{
    HRESULT GetBuffer(void **ppvBuffer, DWORD *pdwSize);
};

[local, object, uuid(d2ac287a-b39b-11d1-8704-00600893b1bd)]
interface IDirectMusicPortDownload : IUnknown
{
    HRESULT GetBuffer(DWORD dwDLId, IDirectMusicDownload **ppIDMDownload);
    HRESULT AllocateBuffer(DWORD dwSize, IDirectMusicDownload **ppIDMDownload);
    HRESULT GetDLId(DWORD *pdwStartDLId, DWORD dwCount);
    HRESULT GetAppend(DWORD *pdwAppend);
    HRESULT Download(IDirectMusicDownload *pIDMDownload);
    HRESULT Unload(IDirectMusicDownload *pIDMDownload);
};

[local, object, uuid(08f2d8c9-37c2-11d2-b9f9-0000f875ac12)]
interface IDirectMusicPort : IUnknown
{
    HRESULT PlayBuffer(LPDIRECTMUSICBUFFER pBuffer);
    HRESULT SetReadNotificationHandle(HANDLE hEvent);
    HRESULT Read(LPDIRECTMUSICBUFFER pBuffer);
    HRESULT DownloadInstrument(IDirectMusicInstrument *pInstrument, IDirectMusicDownloadedInstrument **ppDownloadedInstrument, DMUS_NOTERANGE *pNoteRanges, DWORD dwNumNoteRanges);
    HRESULT UnloadInstrument(IDirectMusicDownloadedInstrument *pDownloadedInstrument);
    HRESULT GetLatencyClock(IReferenceClock **ppClock);
    HRESULT GetRunningStats(LPDMUS_SYNTHSTATS pStats);
    HRESULT Compact();
    HRESULT GetCaps(LPDMUS_PORTCAPS pPortCaps);
    HRESULT DeviceIoControl(DWORD dwIoControlCode, LPVOID lpInBuffer, DWORD nInBufferSize, LPVOID lpOutBuffer, DWORD nOutBufferSize, LPDWORD lpBytesReturned, OVERLAPPED *lpOverlapped);
    HRESULT SetNumChannelGroups(DWORD dwChannelGroups);
    HRESULT GetNumChannelGroups(LPDWORD pdwChannelGroups);
    HRESULT Activate(BOOL fActive);
    HRESULT SetChannelPriority(DWORD dwChannelGroup, DWORD dwChannel, DWORD dwPriority);
    HRESULT GetChannelPriority(DWORD dwChannelGroup, DWORD dwChannel, LPDWORD pdwPriority);
    HRESULT SetDirectSound(IDirectSound *pDirectSound, IDirectSoundBuffer *pDirectSoundBuffer);
    HRESULT GetFormat(LPWAVEFORMATEX pWaveFormatEx, LPDWORD pdwWaveFormatExSize, LPDWORD pdwBufferSize);
};

[local, object, uuid(ced153e7-3606-11d2-b9f9-0000f875ac12)]
interface IDirectMusicThru : IUnknown
{
    HRESULT ThruChannel(DWORD dwSourceChannelGroup, DWORD dwSourceChannel, DWORD dwDestinationChannelGroup, DWORD dwDestinationChannel, IDirectMusicPort *pDestinationPort);
};

typedef IDirectMusicCollection *LPDIRECTMUSICCOLLECTION;
typedef IDirectMusicInstrument *LPDIRECTMUSICINSTRUMENT;
typedef IDirectMusicDownloadedInstrument *LPDIRECTMUSICDOWNLOADEDINSTRUMENT;
typedef IDirectMusicDownload *LPDIRECTMUSICDOWNLOAD;
typedef IDirectMusicPortDownload *LPDIRECTMUSICPORTDOWNLOAD;
typedef IDirectMusicPort *LPDIRECTMUSICPORT;
typedef IDirectMusicThru *LPDIRECTMUSICTHRU;

cpp_quote("#define IID_IDirectMusicCollection8 IID_IDirectMusicCollection")
typedef IDirectMusicCollection IDirectMusicCollection8, *LPDIRECTMUSICCOLLECTION8;

cpp_quote("#define IID_IDirectMusicDownload8 IID_IDirectMusicDownload")
typedef IDirectMusicDownload IDirectMusicDownload8, *LPDIRECTMUSICINSTRUMENT8;

cpp_quote("#define IID_IDirectMusicDownloadedInstrument8 IID_IDirectMusicDownloadedInstrument")
typedef IDirectMusicDownloadedInstrument IDirectMusicDownloadedInstrument8, *LPDIRECTMUSICDOWNLOADEDINSTRUMENT8;

cpp_quote("#define IID_IDirectMusicInstrument8 IID_IDirectMusicInstrument")
typedef IDirectMusicInstrument IDirectMusicInstrument8, *LPDIRECTMUSICDOWNLOAD8;

cpp_quote("#define IID_IDirectMusicPort8 IID_IDirectMusicPort")
typedef IDirectMusicPort IDirectMusicPort8, *LPDIRECTMUSICPORTDOWNLOAD8;

cpp_quote("#define IID_IDirectMusicPortDownload8 IID_IDirectMusicPortDownload")
typedef IDirectMusicPortDownload IDirectMusicPortDownload8, *LPDIRECTMUSICPORT8;

cpp_quote("#define IID_IDirectMusicThru8 IID_IDirectMusicThru")
typedef IDirectMusicThru IDirectMusicThru8, *LPDIRECTMUSICTHRU8;
