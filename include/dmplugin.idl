/*
 *  DirectMusic Performance Layer Plugins API
 *
 *  Copyright (C) 2003-2004 Rok Mandeljc
 *
 *  This program is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License as published by the Free Software Foundation; either
 *  version 2.1 of the License, or (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public
 *  License along with this program; if not, write to the Free Software
 *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA
 */

import "unknwn.idl";
import "objidl.idl";
import "wtypes.idl";

interface IDirectMusicGraph;
interface IDirectMusicPerformance;
interface IDirectMusicSegment;
interface IDirectMusicSegmentState;

#ifndef REFERENCE_TIME_DEFINED
#define REFERENCE_TIME_DEFINED
typedef LONGLONG REFERENCE_TIME;
#endif

cpp_quote("#define DMUS_REGSTR_PATH_TOOLS \"Software\\\\Microsoft\\\\DirectMusic\\\\Tools\"")

cpp_quote("DEFINE_GUID(CLSID_DirectMusicBandTrack,              0xd2ac2894,0xb39b,0x11d1,0x87,0x04,0x00,0x60,0x08,0x93,0xb1,0xbd);")
cpp_quote("DEFINE_GUID(CLSID_DirectMusicChordTrack,             0xd2ac288b,0xb39b,0x11d1,0x87,0x04,0x00,0x60,0x08,0x93,0xb1,0xbd);")
cpp_quote("DEFINE_GUID(CLSID_DirectMusicChordMapTrack,          0xd2ac2896,0xb39b,0x11d1,0x87,0x04,0x00,0x60,0x08,0x93,0xb1,0xbd);")
cpp_quote("DEFINE_GUID(CLSID_DirectMusicCommandTrack,           0xd2ac288c,0xb39b,0x11d1,0x87,0x04,0x00,0x60,0x08,0x93,0xb1,0xbd);")
cpp_quote("DEFINE_GUID(CLSID_DirectMusicLyricsTrack,            0x995c1cf5,0x54ff,0x11d3,0x8b,0xda,0x00,0x60,0x08,0x93,0xb1,0xb6);")
cpp_quote("DEFINE_GUID(CLSID_DirectMusicMarkerTrack,            0x55a8fd00,0x4288,0x11d3,0x9b,0xd1,0x8a,0x0d,0x61,0xc8,0x88,0x35);")
cpp_quote("DEFINE_GUID(CLSID_DirectMusicMotifTrack,             0xd2ac288e,0xb39b,0x11d1,0x87,0x04,0x00,0x60,0x08,0x93,0xb1,0xbd);")
cpp_quote("DEFINE_GUID(CLSID_DirectMusicMuteTrack,              0xd2ac2898,0xb39b,0x11d1,0x87,0x04,0x00,0x60,0x08,0x93,0xb1,0xbd);")
cpp_quote("DEFINE_GUID(CLSID_DirectMusicParamControlTrack,      0x4be0537b,0x5c19,0x11d3,0x8b,0xdc,0x00,0x60,0x08,0x93,0xb1,0xb6);")
cpp_quote("DEFINE_GUID(CLSID_DirectMusicScriptTrack,            0x4108fa85,0x3586,0x11d3,0x8b,0xd7,0x00,0x60,0x08,0x93,0xb1,0xb6);")
cpp_quote("DEFINE_GUID(CLSID_DirectMusicSegmentTriggerTrack,    0xbae4d665,0x4ea1,0x11d3,0x8b,0xda,0x00,0x60,0x08,0x93,0xb1,0xb6);")
cpp_quote("DEFINE_GUID(CLSID_DirectMusicSeqTrack,               0xd2ac2886,0xb39b,0x11d1,0x87,0x04,0x00,0x60,0x08,0x93,0xb1,0xbd);")
cpp_quote("DEFINE_GUID(CLSID_DirectMusicSignPostTrack,          0xf17e8672,0xc3b4,0x11d1,0x87,0x0b,0x00,0x60,0x08,0x93,0xb1,0xbd);")
cpp_quote("DEFINE_GUID(CLSID_DirectMusicStyleTrack,             0xd2ac288d,0xb39b,0x11d1,0x87,0x04,0x00,0x60,0x08,0x93,0xb1,0xbd);")
cpp_quote("DEFINE_GUID(CLSID_DirectMusicSysExTrack,             0xd2ac2887,0xb39b,0x11d1,0x87,0x04,0x00,0x60,0x08,0x93,0xb1,0xbd);")
cpp_quote("DEFINE_GUID(CLSID_DirectMusicTempoTrack,             0xd2ac2885,0xb39b,0x11d1,0x87,0x04,0x00,0x60,0x08,0x93,0xb1,0xbd);")
cpp_quote("DEFINE_GUID(CLSID_DirectMusicTimeSigTrack,           0xd2ac2888,0xb39b,0x11d1,0x87,0x04,0x00,0x60,0x08,0x93,0xb1,0xbd);")
cpp_quote("DEFINE_GUID(CLSID_DirectMusicWaveTrack,              0xeed36461,0x9ea5,0x11d3,0x9b,0xd1,0x00,0x80,0xc7,0x15,0x0a,0x74);")
/* MS doesn't support this in DX 9.0 and newer... but there's no harm in keeping it around */
cpp_quote("DEFINE_GUID(CLSID_DirectMusicMelodyFormulationTrack, 0xb0684266,0xb57f,0x11d2,0x97,0xf9,0x00,0xc0,0x4f,0xa3,0x6e,0x58);")

typedef struct _DMUS_PMSG DMUS_PMSG;
typedef LONG MUSIC_TIME;

cpp_quote("#define DMUS_TRACK_PARAMF_CLOCK 0x1")

typedef enum enumDMUS_TRACKF_FLAGS
{
	DMUS_TRACKF_SEEK       = 0x001,
	DMUS_TRACKF_LOOP       = 0x002,
	DMUS_TRACKF_START      = 0x004,
	DMUS_TRACKF_FLUSH      = 0x008,
	DMUS_TRACKF_DIRTY      = 0x010,
	DMUS_TRACKF_NOTIFY_OFF = 0x020,
	DMUS_TRACKF_PLAY_OFF   = 0x040,
	DMUS_TRACKF_LOOPEND    = 0x080,
	DMUS_TRACKF_STOP       = 0x100,
	DMUS_TRACKF_RECOMPOSE  = 0x200,
	DMUS_TRACKF_CLOCK      = 0x400,
} DMUS_TRACKF_FLAGS;

interface IDirectMusicTool;
interface IDirectMusicTool8;
interface IDirectMusicTrack;
interface IDirectMusicTrack8;

[
    local,
    object,
    uuid(d2ac28ba-b39b-11d1-8704-00600893b1bd)
]
interface IDirectMusicTool : IUnknown
{
    HRESULT Init(IDirectMusicGraph *pGraph);
    HRESULT GetMsgDeliveryType(DWORD *pdwDeliveryType);
    HRESULT GetMediaTypeArraySize(DWORD *pdwNumElements);
    HRESULT GetMediaTypes(DWORD **padwMediaTypes, DWORD dwNumElements);
    HRESULT ProcessPMsg(IDirectMusicPerformance *pPerf, DMUS_PMSG *pPMSG);
    HRESULT Flush(IDirectMusicPerformance *pPerf, DMUS_PMSG *pPMSG, REFERENCE_TIME rtTime);
};
typedef IDirectMusicTool *LPDIRECTMUSICTOOL;

[
    local,
    object,
    uuid(0e674303-3b05-11d3-9bd1-f9e7f0a01536)
]
interface IDirectMusicTool8 : IDirectMusicTool
{
    HRESULT Clone(IDirectMusicTool **ppTool);
};
typedef IDirectMusicTool8 *LPDIRECTMUSICTOOL8;

[
    local,
    object,
    uuid(f96029a1-4282-11d2-8717-00600893b1bd)
]
interface IDirectMusicTrack : IUnknown
{
    HRESULT Init(IDirectMusicSegment *pSegment);
    HRESULT InitPlay(IDirectMusicSegmentState *pSegmentState, IDirectMusicPerformance *pPerformance, void **ppStateData, DWORD dwVirtualTrackID, DWORD dwFlags);
    HRESULT EndPlay(void *pStateData);
    HRESULT Play(void *pStateData, MUSIC_TIME mtStart, MUSIC_TIME mtEnd, MUSIC_TIME mtOffset, DWORD dwFlags, IDirectMusicPerformance *pPerf, IDirectMusicSegmentState *pSegSt, DWORD dwVirtualID);
    HRESULT GetParam(REFGUID rguidType, MUSIC_TIME mtTime, MUSIC_TIME *pmtNext, void *pParam);
    HRESULT SetParam(REFGUID rguidType, MUSIC_TIME mtTime, void *pParam);
    HRESULT IsParamSupported(REFGUID rguidType);
    HRESULT AddNotificationType(REFGUID rguidNotificationType);
    HRESULT RemoveNotificationType(REFGUID rguidNotificationType);
    HRESULT Clone(MUSIC_TIME mtStart, MUSIC_TIME mtEnd, IDirectMusicTrack **ppTrack);
};
typedef IDirectMusicTrack *LPDIRECTMUSICTRACK;

[
    local,
    object,
    uuid(0e674304-3b05-11d3-9bd1-f9e7f0a01536)
]
interface IDirectMusicTrack8 : IDirectMusicTrack
{
    HRESULT PlayEx(void *pStateData, REFERENCE_TIME rtStart, REFERENCE_TIME rtEnd, REFERENCE_TIME rtOffset, DWORD dwFlags, IDirectMusicPerformance *pPerf, IDirectMusicSegmentState *pSegSt, DWORD dwVirtualID);
    HRESULT GetParamEx(REFGUID rguidType, REFERENCE_TIME rtTime, REFERENCE_TIME *prtNext, void *pParam, void *pStateData, DWORD dwFlags);
    HRESULT SetParamEx(REFGUID rguidType, REFERENCE_TIME rtTime, void *pParam, void *pStateData, DWORD dwFlags);
    HRESULT Compose(IUnknown *pContext, DWORD dwTrackGroup, IDirectMusicTrack **ppResultTrack);
    HRESULT Join(IDirectMusicTrack *pNewTrack, MUSIC_TIME mtJoin, IUnknown *pContext, DWORD dwTrackGroup, IDirectMusicTrack **ppResultTrack);
};
typedef IDirectMusicTrack8 *LPDIRECTMUSICTRACK8;
