/*
 *  DirectMusic Performance API
 *
 *  Copyright (C) 2003-2004 Rok Mandeljc
 *
 *  This program is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License as published by the Free Software Foundation; either
 *  version 2.1 of the License, or (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public
 *  License along with this program; if not, write to the Free Software
 *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA
 */

import "unknwn.idl";
import "objidl.idl";
import "wtypes.idl";
import "mmreg.h";

import "dmusicc.idl";
import "dmplugin.idl";

interface IDirectMusicTrack;

cpp_quote("DEFINE_GUID(CLSID_DirectMusicAudioPathConfig,              0xee0b9ca0,0xa81e,0x11d3,0x9b,0xd1,0x00,0x80,0xc7,0x15,0x0a,0x74);")
cpp_quote("DEFINE_GUID(CLSID_DirectMusicBand,                         0x79ba9e00,0xb6ee,0x11d1,0x86,0xbe,0x00,0xc0,0x4f,0xbf,0x8f,0xef);")
cpp_quote("DEFINE_GUID(CLSID_DirectMusicChordMap,                     0xd2ac288f,0xb39b,0x11d1,0x87,0x04,0x00,0x60,0x08,0x93,0xb1,0xbd);")
cpp_quote("DEFINE_GUID(CLSID_DirectMusicComposer,                     0xd2ac2890,0xb39b,0x11d1,0x87,0x04,0x00,0x60,0x08,0x93,0xb1,0xbd);")
cpp_quote("DEFINE_GUID(CLSID_DirectMusicContainer,                    0x9301e380,0x1f22,0x11d3,0x82,0x26,0xd2,0xfa,0x76,0x25,0x5d,0x47);")
cpp_quote("DEFINE_GUID(CLSID_DirectMusicGraph,                        0xd2ac2884,0xb39b,0x11d1,0x87,0x04,0x00,0x60,0x08,0x93,0xb1,0xbd);")
cpp_quote("DEFINE_GUID(CLSID_DirectMusicLoader,                       0xd2ac2892,0xb39b,0x11d1,0x87,0x04,0x00,0x60,0x08,0x93,0xb1,0xbd);")
cpp_quote("DEFINE_GUID(CLSID_DirectMusicPatternTrack,                 0xd2ac2897,0xb39b,0x11d1,0x87,0x04,0x00,0x60,0x08,0x93,0xb1,0xbd);")
cpp_quote("DEFINE_GUID(CLSID_DirectMusicPerformance,                  0xd2ac2881,0xb39b,0x11d1,0x87,0x04,0x00,0x60,0x08,0x93,0xb1,0xbd);")
cpp_quote("DEFINE_GUID(CLSID_DirectMusicScript,                       0x810b5013,0xe88d,0x11d2,0x8b,0xc1,0x00,0x60,0x08,0x93,0xb1,0xb6);")
cpp_quote("DEFINE_GUID(CLSID_DirectMusicSegment,                      0xd2ac2882,0xb39b,0x11d1,0x87,0x04,0x00,0x60,0x08,0x93,0xb1,0xbd);")
cpp_quote("DEFINE_GUID(CLSID_DirectMusicSegmentState,                 0xd2ac2883,0xb39b,0x11d1,0x87,0x04,0x00,0x60,0x08,0x93,0xb1,0xbd);")
cpp_quote("DEFINE_GUID(CLSID_DirectMusicStyle,                        0xd2ac288a,0xb39b,0x11d1,0x87,0x04,0x00,0x60,0x08,0x93,0xb1,0xbd);")
cpp_quote("DEFINE_GUID(CLSID_DirectSoundWave,                         0x8a667154,0xf9cb,0x11d2,0xad,0x8a,0x00,0x60,0xb0,0x57,0x5a,0xbc);")
/* MS doesn't support this in DX 9.0 and newer... but there's no harm in keeping it around */
cpp_quote("DEFINE_GUID(CLSID_DirectMusicSong,                         0xaed5f0a5,0xd972,0x483d,0xa3,0x84,0x64,0x9d,0xfe,0xb9,0xc1,0x81);")
/* these CLSIDs aren't officially declared in any dmusic header, but are used by wine's regsvr implementations*/
cpp_quote("DEFINE_GUID(CLSID_DirectMusicSynthSink,                    0xaec17ce3,0xa514,0x11d1,0xaf,0xa6,0x00,0xaa,0x00,0x24,0xd8,0xb6);")
cpp_quote("DEFINE_GUID(CLSID_DirectMusicSection,                      0x3f037241,0x414e,0x11d1,0xa7,0xce,0x00,0xa0,0xc9,0x13,0xf7,0x3c);")
cpp_quote("DEFINE_GUID(CLSID_DirectMusicAuditionTrack,                0xd2ac2897,0xb39b,0x11d1,0x87,0x04,0x00,0x60,0x08,0x93,0xb1,0xbd);")
cpp_quote("DEFINE_GUID(CLSID_DirectMusicSegTriggerTrack,              0xbae4d665,0x4ea1,0x11d3,0x8b,0xda,0x00,0x60,0x08,0x93,0xb1,0xb6);")
cpp_quote("DEFINE_GUID(CLSID_DirectMusicTemplate,                     0xd30bcc65,0x60e8,0x11d1,0xa7,0xce,0x00,0xa0,0xc9,0x13,0xf7,0x3c);")
cpp_quote("DEFINE_GUID(CLSID_DirectMusicScriptAutoImpSegment,         0x4062c116,0x0270,0x11d3,0x8b,0xcb,0x00,0x60,0x08,0x93,0xb1,0xb6);")
cpp_quote("DEFINE_GUID(CLSID_AudioVBScript,                           0x4ee17959,0x931e,0x49e4,0xa2,0xc6,0x97,0x7e,0xcf,0x36,0x28,0xf3);")
cpp_quote("DEFINE_GUID(CLSID_DirectMusicScriptAutoImpPerformance,     0xa861c6e2,0xfcfc,0x11d2,0x8b,0xc9,0x00,0x60,0x08,0x93,0xb1,0xb6);")
cpp_quote("DEFINE_GUID(CLSID_DirectMusicScriptSourceCodeLoader,       0xc70eb77f,0xefd4,0x4678,0xa2,0x7b,0xbf,0x16,0x48,0xf3,0x0d,0x04);")
cpp_quote("DEFINE_GUID(CLSID_DirectMusicScriptAutoImpSegmentState,    0xebf2320a,0x2502,0x11d3,0x8b,0xd1,0x00,0x60,0x08,0x93,0xb1,0xb6);")
cpp_quote("DEFINE_GUID(CLSID_DirectMusicScriptAutoImpAudioPathConfig, 0x1cebde3e,0x6b91,0x484a,0xaf,0x48,0x5e,0x4f,0x4e,0xd6,0xb1,0xe1);")
cpp_quote("DEFINE_GUID(CLSID_DirectMusicScriptAutoImpAudioPath,       0x2c5f9b72,0x7148,0x4d97,0xbf,0xc9,0x68,0xa0,0xe0,0x76,0xbe,0xbd);")
cpp_quote("DEFINE_GUID(CLSID_DirectMusicScriptAutoImpSong,            0xa16f1761,0xb6d8,0x42eb,0x8d,0x57,0x4a,0x44,0xfe,0xdd,0x3b,0xd2);")

/* GUIDs - all types loader */
cpp_quote("DEFINE_GUID(GUID_DirectMusicAllTypes,         0xd2ac2893,0xb39b,0x11d1,0x87,0x04,0x00,0x60,0x08,0x93,0xb1,0xbd);")
/* GUIDs - notification */
cpp_quote("DEFINE_GUID(GUID_NOTIFICATION_CHORD,          0xd2ac289b,0xb39b,0x11d1,0x87,0x04,0x00,0x60,0x08,0x93,0xb1,0xbd);")
cpp_quote("DEFINE_GUID(GUID_NOTIFICATION_COMMAND,        0xd2ac289c,0xb39b,0x11d1,0x87,0x04,0x00,0x60,0x08,0x93,0xb1,0xbd);")
cpp_quote("DEFINE_GUID(GUID_NOTIFICATION_MEASUREANDBEAT, 0xd2ac289a,0xb39b,0x11d1,0x87,0x04,0x00,0x60,0x08,0x93,0xb1,0xbd);")
cpp_quote("DEFINE_GUID(GUID_NOTIFICATION_PERFORMANCE,    0x81f75bc5,0x4e5d,0x11d2,0xbc,0xc7,0x00,0xa0,0xc9,0x22,0xe6,0xeb);")
cpp_quote("DEFINE_GUID(GUID_NOTIFICATION_RECOMPOSE,      0xd348372b,0x945b,0x45ae,0xa5,0x22,0x45,0x0f,0x12,0x5b,0x84,0xa5);")
cpp_quote("DEFINE_GUID(GUID_NOTIFICATION_SEGMENT,        0xd2ac2899,0xb39b,0x11d1,0x87,0x04,0x00,0x60,0x08,0x93,0xb1,0xbd);")
/* GUIDs - param types */
cpp_quote("DEFINE_GUID(GUID_BandParam,                   0x02bb1938,0xcb8b,0x11d2,0x8b,0xb9,0x00,0x60,0x08,0x93,0xb1,0xb6);")
cpp_quote("DEFINE_GUID(GUID_ChordParam,                  0xd2ac289e,0xb39b,0x11d1,0x87,0x04,0x00,0x60,0x08,0x93,0xb1,0xbd);")
cpp_quote("DEFINE_GUID(GUID_CommandParam,                0xd2ac289d,0xb39b,0x11d1,0x87,0x04,0x00,0x60,0x08,0x93,0xb1,0xbd);")
cpp_quote("DEFINE_GUID(GUID_CommandParam2,               0x28f97ef7,0x9538,0x11d2,0x97,0xa9,0x00,0xc0,0x4f,0xa3,0x6e,0x58);")
cpp_quote("DEFINE_GUID(GUID_CommandParamNext,            0x472afe7a,0x281b,0x11d3,0x81,0x7d,0x00,0xc0,0x4f,0xa3,0x6e,0x58);")
cpp_quote("DEFINE_GUID(GUID_IDirectMusicBand,            0xd2ac28ac,0xb39b,0x11d1,0x87,0x04,0x00,0x60,0x08,0x93,0xb1,0xbd);")
cpp_quote("DEFINE_GUID(GUID_IDirectMusicChordMap,        0xd2ac28ad,0xb39b,0x11d1,0x87,0x04,0x00,0x60,0x08,0x93,0xb1,0xbd);")
cpp_quote("DEFINE_GUID(GUID_IDirectMusicStyle,           0xd2ac28a1,0xb39b,0x11d1,0x87,0x04,0x00,0x60,0x08,0x93,0xb1,0xbd);")
cpp_quote("DEFINE_GUID(GUID_MuteParam,                   0xd2ac28af,0xb39b,0x11d1,0x87,0x04,0x00,0x60,0x08,0x93,0xb1,0xbd);")
cpp_quote("DEFINE_GUID(GUID_Play_Marker,                 0xd8761a41,0x801a,0x11d3,0x9b,0xd1,0xda,0xf7,0xe1,0xc3,0xd8,0x34);")
cpp_quote("DEFINE_GUID(GUID_RhythmParam,                 0xd2ac289f,0xb39b,0x11d1,0x87,0x04,0x00,0x60,0x08,0x93,0xb1,0xbd);")
cpp_quote("DEFINE_GUID(GUID_TempoParam,                  0xd2ac28a5,0xb39b,0x11d1,0x87,0x04,0x00,0x60,0x08,0x93,0xb1,0xbd);")
cpp_quote("DEFINE_GUID(GUID_TimeSignature,               0xd2ac28a4,0xb39b,0x11d1,0x87,0x04,0x00,0x60,0x08,0x93,0xb1,0xbd);")
cpp_quote("DEFINE_GUID(GUID_Valid_Start_Time,            0x7f6b1760,0x1fdb,0x11d3,0x82,0x26,0x44,0x45,0x53,0x54,0x00,0x00);")
/* GUIDs - param setting */
cpp_quote("DEFINE_GUID(GUID_Clear_All_Bands,             0xd2ac28ab,0xb39b,0x11d1,0x87,0x04,0x00,0x60,0x08,0x93,0xb1,0xbd);")
cpp_quote("DEFINE_GUID(GUID_ConnectToDLSCollection,      0x1db1ae6b,0xe92e,0x11d1,0xa8,0xc5,0x00,0xc0,0x4f,0xa3,0x72,0x6e);")
cpp_quote("DEFINE_GUID(GUID_Disable_Auto_Download,       0xd2ac28aa,0xb39b,0x11d1,0x87,0x04,0x00,0x60,0x08,0x93,0xb1,0xbd);")
cpp_quote("DEFINE_GUID(GUID_DisableTempo,                0x45fc707d,0x1db4,0x11d2,0xbc,0xac,0x00,0xa0,0xc9,0x22,0xe6,0xeb);")
cpp_quote("DEFINE_GUID(GUID_DisableTimeSig,              0x45fc707b,0x1db4,0x11d2,0xbc,0xac,0x00,0xa0,0xc9,0x22,0xe6,0xeb);")
cpp_quote("DEFINE_GUID(GUID_Download,                    0xd2ac28a7,0xb39b,0x11d1,0x87,0x04,0x00,0x60,0x08,0x93,0xb1,0xbd);")
cpp_quote("DEFINE_GUID(GUID_DownloadToAudioPath,         0x9f2c0341,0xc5c4,0x11d3,0x9b,0xd1,0x44,0x45,0x53,0x54,0x00,0x00);")
cpp_quote("DEFINE_GUID(GUID_Enable_Auto_Download,        0xd2ac28a9,0xb39b,0x11d1,0x87,0x04,0x00,0x60,0x08,0x93,0xb1,0xbd);")
cpp_quote("DEFINE_GUID(GUID_EnableTempo,                 0x45fc707e,0x1db4,0x11d2,0xbc,0xac,0x00,0xa0,0xc9,0x22,0xe6,0xeb);")
cpp_quote("DEFINE_GUID(GUID_EnableTimeSig,               0x45fc707c,0x1db4,0x11d2,0xbc,0xac,0x00,0xa0,0xc9,0x22,0xe6,0xeb);")
cpp_quote("#define GUID_IgnoreBankSelectForGM            GUID_StandardMIDIFile")
cpp_quote("DEFINE_GUID(GUID_SeedVariations,              0x65b76fa5,0xff37,0x11d2,0x81,0x4e,0x00,0xc0,0x4f,0xa3,0x6e,0x58);")
cpp_quote("DEFINE_GUID(GUID_StandardMIDIFile,            0x06621075,0xe92e,0x11d1,0xa8,0xc5,0x00,0xc0,0x4f,0xa3,0x72,0x6e);")
cpp_quote("DEFINE_GUID(GUID_Unload,                      0xd2ac28a8,0xb39b,0x11d1,0x87,0x04,0x00,0x60,0x08,0x93,0xb1,0xbd);")
cpp_quote("DEFINE_GUID(GUID_UnloadFromAudioPath,         0x9f2c0342,0xc5c4,0x11d3,0x9b,0xd1,0x44,0x45,0x53,0x54,0x00,0x00);")
cpp_quote("DEFINE_GUID(GUID_Variations,                  0x11f72cce,0x26e6,0x4ecd,0xaf,0x2e,0xd6,0x68,0xe6,0x67,0x07,0xd8);")
/* GUIDs - global data */
cpp_quote("DEFINE_GUID(GUID_PerfMasterTempo,             0xd2ac28b0,0xb39b,0x11d1,0x87,0x04,0x00,0x60,0x08,0x93,0xb1,0xbd);")
cpp_quote("DEFINE_GUID(GUID_PerfMasterVolume,            0xd2ac28b1,0xb39b,0x11d1,0x87,0x04,0x00,0x60,0x08,0x93,0xb1,0xbd);")
cpp_quote("DEFINE_GUID(GUID_PerfMasterGrooveLevel,       0xd2ac28b2,0xb39b,0x11d1,0x87,0x04,0x00,0x60,0x08,0x93,0xb1,0xbd);")
cpp_quote("DEFINE_GUID(GUID_PerfAutoDownload,            0xfb09565b,0x3631,0x11d2,0xbc,0xb8,0x00,0xa0,0xc9,0x22,0xe6,0xeb);")
/* GUID - default DLS collection */
cpp_quote("DEFINE_GUID(GUID_DefaultGMCollection,         0xf17e8673,0xc3b4,0x11d1,0x87,0x0b,0x00,0x60,0x08,0x93,0xb1,0xbd);")
/* GUID - default synthesizer */
cpp_quote("DEFINE_GUID(GUID_Synth_Default,               0x26bb9432,0x45fe,0x48d3,0xa3,0x75,0x24,0x72,0xc5,0xe3,0xe7,0x86);")
/* GUIDs - define default buffer configuration */
cpp_quote("DEFINE_GUID(GUID_Buffer_Reverb,               0x186cc541,0xdb29,0x11d3,0x9b,0xd1,0x00,0x80,0xc7,0x15,0x0a,0x74);")
cpp_quote("DEFINE_GUID(GUID_Buffer_EnvReverb,            0x186cc542,0xdb29,0x11d3,0x9b,0xd1,0x00,0x80,0xc7,0x15,0x0a,0x74);")
cpp_quote("DEFINE_GUID(GUID_Buffer_Stereo,               0x186cc545,0xdb29,0x11d3,0x9b,0xd1,0x00,0x80,0xc7,0x15,0x0a,0x74);")
cpp_quote("DEFINE_GUID(GUID_Buffer_3D_Dry,               0x186cc546,0xdb29,0x11d3,0x9b,0xd1,0x00,0x80,0xc7,0x15,0x0a,0x74);")
cpp_quote("DEFINE_GUID(GUID_Buffer_Mono,                 0x186cc547,0xdb29,0x11d3,0x9b,0xd1,0x00,0x80,0xc7,0x15,0x0a,0x74);")


/*****************************************************************************
 * Typedef definitions
 */
typedef WORD    TRANSITION_TYPE, *LPTRANSITION_TYPE;
/*
 * typedef __int64 REFERENCE_TIME,  *LPREFERENCE_TIME;
 */
typedef LONG    MUSIC_TIME,      *LPMUSIC_TIME;


/*****************************************************************************
 * Flags
 */
cpp_quote("#define DMUS_APATH_SHARED_STEREOPLUSREVERB 0x1")
cpp_quote("#define DMUS_APATH_DYNAMIC_3D              0x6")
cpp_quote("#define DMUS_APATH_DYNAMIC_MONO            0x7")
cpp_quote("#define DMUS_APATH_DYNAMIC_STEREO          0x8")

cpp_quote("#define DMUS_AUDIOF_3D          0x01")
cpp_quote("#define DMUS_AUDIOF_ENVIRON     0x02")
cpp_quote("#define DMUS_AUDIOF_EAX         0x04")
cpp_quote("#define DMUS_AUDIOF_DMOS        0x08")
cpp_quote("#define DMUS_AUDIOF_STREAMING   0x10")
cpp_quote("#define DMUS_AUDIOF_BUFFERS     0x20")
cpp_quote("#define DMUS_AUDIOF_ALL         0x3F")

cpp_quote("#define DMUS_AUDIOPARAMS_FEATURES     0x1")
cpp_quote("#define DMUS_AUDIOPARAMS_VOICES       0x2")
cpp_quote("#define DMUS_AUDIOPARAMS_SAMPLERATE   0x4")
cpp_quote("#define DMUS_AUDIOPARAMS_DEFAULTSYNTH 0x8")

cpp_quote("#define DMUS_CURVET_PBCURVE   0x03")
cpp_quote("#define DMUS_CURVET_CCCURVE   0x04")
cpp_quote("#define DMUS_CURVET_MATCURVE  0x05")
cpp_quote("#define DMUS_CURVET_PATCURVE  0x06")
cpp_quote("#define DMUS_CURVET_RPNCURVE  0x07")
cpp_quote("#define DMUS_CURVET_NRPNCURVE 0x08")

cpp_quote("#define DMUS_MASTERTEMPO_MAX 100.0f")
cpp_quote("#define DMUS_MASTERTEMPO_MIN 0.01f")

cpp_quote("#define DMUS_MAX_NAME     0x40")
#define DMUS_MAX_NAME     0x40
cpp_quote("#define DMUS_MAX_CATEGORY 0x40")
#define DMUS_MAX_CATEGORY 0x40
cpp_quote("#define DMUS_MAX_FILENAME MAX_PATH")
#define DMUS_MAX_FILENAME 260
cpp_quote("#define DMUS_MAXSUBCHORD 0x8")
#define DMUS_MAXSUBCHORD 0x8

cpp_quote("#define DMUS_NOTIFICATION_SEGSTART       0x0")
cpp_quote("#define DMUS_NOTIFICATION_SEGEND         0x1")
cpp_quote("#define DMUS_NOTIFICATION_SEGALMOSTEND   0x2")
cpp_quote("#define DMUS_NOTIFICATION_SEGLOOP        0x3")
cpp_quote("#define DMUS_NOTIFICATION_SEGABORT       0x4")
cpp_quote("#define DMUS_NOTIFICATION_MUSICSTARTED   0x0")
cpp_quote("#define DMUS_NOTIFICATION_MUSICSTOPPED   0x1")
cpp_quote("#define DMUS_NOTIFICATION_MUSICALMOSTEND 0x2")
cpp_quote("#define DMUS_NOTIFICATION_MEASUREBEAT    0x0")
cpp_quote("#define DMUS_NOTIFICATION_CHORD          0x0")
cpp_quote("#define DMUS_NOTIFICATION_GROOVE         0x0")
cpp_quote("#define DMUS_NOTIFICATION_EMBELLISHMENT  0x1")
cpp_quote("#define DMUS_NOTIFICATION_RECOMPOSE      0x0")

cpp_quote("#define DMUS_OBJ_OBJECT   0x001")
cpp_quote("#define DMUS_OBJ_CLASS    0x002")
cpp_quote("#define DMUS_OBJ_NAME     0x004")
cpp_quote("#define DMUS_OBJ_CATEGORY 0x008")
cpp_quote("#define DMUS_OBJ_FILENAME 0x010")
cpp_quote("#define DMUS_OBJ_FULLPATH 0x020")
cpp_quote("#define DMUS_OBJ_URL      0x040")
cpp_quote("#define DMUS_OBJ_VERSION  0x080")
cpp_quote("#define DMUS_OBJ_DATE     0x100")
cpp_quote("#define DMUS_OBJ_LOADED   0x200")
cpp_quote("#define DMUS_OBJ_MEMORY   0x400")
cpp_quote("#define DMUS_OBJ_STREAM   0x800")

cpp_quote("#define DMUS_PATH_SEGMENT           0x1000")
cpp_quote("#define DMUS_PATH_SEGMENT_TRACK     0x1100")
cpp_quote("#define DMUS_PATH_SEGMENT_GRAPH     0x1200")
cpp_quote("#define DMUS_PATH_SEGMENT_TOOL      0x1300")
cpp_quote("#define DMUS_PATH_AUDIOPATH         0x2000")
cpp_quote("#define DMUS_PATH_AUDIOPATH_GRAPH   0x2200")
cpp_quote("#define DMUS_PATH_AUDIOPATH_TOOL    0x2300")
cpp_quote("#define DMUS_PATH_PERFORMANCE       0x3000")
cpp_quote("#define DMUS_PATH_PERFORMANCE_GRAPH 0x3200")
cpp_quote("#define DMUS_PATH_PERFORMANCE_TOOL  0x3300")
cpp_quote("#define DMUS_PATH_PORT              0x4000")
cpp_quote("#define DMUS_PATH_BUFFER            0x6000")
cpp_quote("#define DMUS_PATH_BUFFER_DMO        0x6100")
cpp_quote("#define DMUS_PATH_MIXIN_BUFFER      0x7000")
cpp_quote("#define DMUS_PATH_MIXIN_BUFFER_DMO  0x7100")
cpp_quote("#define DMUS_PATH_PRIMARY_BUFFER    0x8000")

cpp_quote("#define DMUS_PCHANNEL_BROADCAST_PERFORMANCE	0xFFFFFFFF")
cpp_quote("#define DMUS_PCHANNEL_BROADCAST_AUDIOPATH   0xFFFFFFFE")
cpp_quote("#define DMUS_PCHANNEL_BROADCAST_SEGMENT	    0xFFFFFFFD")
cpp_quote("#define DMUS_PCHANNEL_BROADCAST_GROUPS  	0xFFFFFFFC")
cpp_quote("#define DMUS_PCHANNEL_ALL                   0xFFFFFFFB ")

cpp_quote("#define DMUS_PLAYMODE_FIXED             0x0  ")
cpp_quote("#define DMUS_PLAYMODE_FIXEDTOKEY        DMUS_PLAYMODE_KEY_ROOT")
cpp_quote("#define DMUS_PLAYMODE_FIXEDTOCHORD      DMUS_PLAYMODE_CHORD_ROOT")
cpp_quote("#define DMUS_PLAYMODE_PEDALPOINT        (DMUS_PLAYMODE_KEY_ROOT | DMUS_PLAYMODE_SCALE_INTERVALS)")
cpp_quote("#define DMUS_PLAYMODE_MELODIC           (DMUS_PLAYMODE_CHORD_ROOT | DMUS_PLAYMODE_SCALE_INTERVALS)")
cpp_quote("#define DMUS_PLAYMODE_NORMALCHORD       (DMUS_PLAYMODE_CHORD_ROOT | DMUS_PLAYMODE_CHORD_INTERVALS)")
cpp_quote("#define DMUS_PLAYMODE_ALWAYSPLAY        (DMUS_PLAYMODE_MELODIC | DMUS_PLAYMODE_NORMALCHORD)")
cpp_quote("#define DMUS_PLAYMODE_PEDALPOINTCHORD   (DMUS_PLAYMODE_KEY_ROOT | DMUS_PLAYMODE_CHORD_INTERVALS)")
cpp_quote("#define DMUS_PLAYMODE_PEDALPOINTALWAYS  (DMUS_PLAYMODE_PEDALPOINT | DMUS_PLAYMODE_PEDALPOINTCHORD)")
cpp_quote("#define DMUS_PLAYMODE_PURPLEIZED        DMUS_PLAYMODE_ALWAYSPLAY")
cpp_quote("#define DMUS_PLAYMODE_SCALE_ROOT        DMUS_PLAYMODE_KEY_ROOT")
cpp_quote("#define DMUS_PLAYMODE_FIXEDTOSCALE      DMUS_PLAYMODE_FIXEDTOKEY")

cpp_quote("#define DMUS_PPQ 768")

cpp_quote("#define DMUS_SEG_REPEAT_INFINITE 0xFFFFFFFF")
cpp_quote("#define DMUS_SEG_ALLTRACKS       0x80000000")
cpp_quote("#define DMUS_SEG_ANYTRACK        0x80000000")

cpp_quote("#define DMUS_TEMPO_MAX 1000")
cpp_quote("#define DMUS_TEMPO_MIN 1")

cpp_quote("#define DMUS_TRACKCONFIG_OVERRIDE_ALL          0x00001")
cpp_quote("#define DMUS_TRACKCONFIG_OVERRIDE_PRIMARY      0x00002")
cpp_quote("#define DMUS_TRACKCONFIG_FALLBACK              0x00004")
cpp_quote("#define DMUS_TRACKCONFIG_CONTROL_ENABLED       0x00008")
cpp_quote("#define DMUS_TRACKCONFIG_PLAY_ENABLED          0x00010")
cpp_quote("#define DMUS_TRACKCONFIG_NOTIFICATION_ENABLED  0x00020")
cpp_quote("#define DMUS_TRACKCONFIG_PLAY_CLOCKTIME        0x00040")
cpp_quote("#define DMUS_TRACKCONFIG_PLAY_COMPOSE 	       0x00080")
cpp_quote("#define DMUS_TRACKCONFIG_LOOP_COMPOSE          0x00100")
cpp_quote("#define DMUS_TRACKCONFIG_COMPOSING             0x00200")
cpp_quote("#define DMUS_TRACKCONFIG_TRANS1_FROMSEGSTART   0x00400")
cpp_quote("#define DMUS_TRACKCONFIG_TRANS1_FROMSEGCURRENT 0x00800")
cpp_quote("#define DMUS_TRACKCONFIG_TRANS1_TOSEGSTART     0x01000")
cpp_quote("#define DMUS_TRACKCONFIG_CONTROL_PLAY          0x10000")
cpp_quote("#define DMUS_TRACKCONFIG_CONTROL_NOTIFICATION  0x20000")
cpp_quote("#define DMUS_TRACKCONFIG_DEFAULT               (DMUS_TRACKCONFIG_CONTROL_ENABLED | DMUS_TRACKCONFIG_PLAY_ENABLED | DMUS_TRACKCONFIG_NOTIFICATION_ENABLED)")

cpp_quote("#define DMUS_WAVEF_OFF          0x01")
cpp_quote("#define DMUS_WAVEF_STREAMING    0x02")
cpp_quote("#define DMUS_WAVEF_NOINVALIDATE 0x04")
cpp_quote("#define DMUS_WAVEF_NOPREROLL    0x08")
cpp_quote("#define DMUS_WAVEF_IGNORELOOPS  0x20")

cpp_quote("#define DMUSB_LOADED  0x1")
cpp_quote("#define DMUSB_DEFAULT 0x2")

cpp_quote("#define MT_MIN 0x80000000")
cpp_quote("#define MT_MAX 0x7FFFFFFF")


/*****************************************************************************
 * Definitions
 */
cpp_quote("#define DMUS_PMSG_PART \\")
cpp_quote("    DWORD              dwSize; \\")
cpp_quote("    REFERENCE_TIME     rtTime; \\")
cpp_quote("    MUSIC_TIME         mtTime; \\")
cpp_quote("    DWORD              dwFlags; \\")
cpp_quote("    DWORD              dwPChannel; \\")
cpp_quote("    DWORD              dwVirtualTrackID; \\")
cpp_quote("    IDirectMusicTool*  pTool; \\")
cpp_quote("    struct IDirectMusicGraph* pGraph; \\")
cpp_quote("    DWORD              dwType; \\")
cpp_quote("    DWORD              dwVoiceID; \\")
cpp_quote("    DWORD              dwGroupID; \\")
cpp_quote("    IUnknown*          punkUser;")

interface IDirectMusicTool;
interface IDirectMusicGraph;

#define DMUS_PMSG_PART \
    DWORD              dwSize; \
    REFERENCE_TIME     rtTime; \
    MUSIC_TIME         mtTime; \
    DWORD              dwFlags; \
    DWORD              dwPChannel; \
    DWORD              dwVirtualTrackID; \
    IDirectMusicTool*  pTool; \
    IDirectMusicGraph* pGraph; \
    DWORD              dwType; \
    DWORD              dwVoiceID; \
    DWORD              dwGroupID; \
    IUnknown*          punkUser;


/*****************************************************************************
 * Enumerations
 */

/* actual enumerations */
typedef enum enumDMUS_STYLET_TYPES {
	DMUS_STYLET_PATTERN = 0x0,
	DMUS_STYLET_MOTIF   = 0x1,
} DMUS_STYLET_TYPES;

typedef enum enumDMUS_COMMANDT_TYPES {
	DMUS_COMMANDT_GROOVE      = 0x0,
	DMUS_COMMANDT_FILL        = 0x1,
	DMUS_COMMANDT_INTRO       = 0x2,
	DMUS_COMMANDT_BREAK       = 0x3,
	DMUS_COMMANDT_END         = 0x4,
	DMUS_COMMANDT_ENDANDINTRO = 0x5
} DMUS_COMMANDT_TYPES;

typedef enum enumDMUS_SHAPET_TYPES {
	DMUS_SHAPET_FALLING  = 0x0,
	DMUS_SHAPET_LEVEL    = 0x1,
	DMUS_SHAPET_LOOPABLE = 0x2,
	DMUS_SHAPET_LOUD     = 0x3,
	DMUS_SHAPET_QUIET    = 0x4,
	DMUS_SHAPET_PEAKING  = 0x5,
	DMUS_SHAPET_RANDOM   = 0x6,
	DMUS_SHAPET_RISING   = 0x7,
	DMUS_SHAPET_SONG     = 0x8
} DMUS_SHAPET_TYPES;

typedef enum enumDMUS_COMPOSEF_FLAGS {
	DMUS_COMPOSEF_NONE                = 0x000000,
	DMUS_COMPOSEF_ALIGN               = 0x000001,
	DMUS_COMPOSEF_OVERLAP             = 0x000002,
	DMUS_COMPOSEF_IMMEDIATE           = 0x000004,
	DMUS_COMPOSEF_GRID                = 0x000008,
	DMUS_COMPOSEF_BEAT                = 0x000010,
	DMUS_COMPOSEF_MEASURE             = 0x000020,
	DMUS_COMPOSEF_AFTERPREPARETIME    = 0x000040,
	DMUS_COMPOSEF_VALID_START_BEAT    = 0x000080,
	DMUS_COMPOSEF_VALID_START_GRID    = 0x000100,
	DMUS_COMPOSEF_VALID_START_TICK    = 0x000200,
	DMUS_COMPOSEF_SEGMENTEND          = 0x000400,
	DMUS_COMPOSEF_MARKER              = 0x000800,
	DMUS_COMPOSEF_MODULATE            = 0x001000,
	DMUS_COMPOSEF_LONG                = 0x002000,
	DMUS_COMPOSEF_ENTIRE_TRANSITION   = 0x004000,
	DMUS_COMPOSEF_1BAR_TRANSITION     = 0x008000,
	DMUS_COMPOSEF_ENTIRE_ADDITION     = 0x010000,
	DMUS_COMPOSEF_1BAR_ADDITION       = 0x020000,
	DMUS_COMPOSEF_VALID_START_MEASURE = 0x040000,
	DMUS_COMPOSEF_DEFAULT             = 0x080000,
	DMUS_COMPOSEF_NOINVALIDATE        = 0x100000,
	DMUS_COMPOSEF_USE_AUDIOPATH       = 0x200000,
	DMUS_COMPOSEF_INVALIDATE_PRI      = 0x400000
} DMUS_COMPOSEF_FLAGS;

typedef enum enumDMUS_PMSGF_FLAGS {
	DMUS_PMSGF_REFTIME        = 1,
	DMUS_PMSGF_MUSICTIME      = 2,
	DMUS_PMSGF_TOOL_IMMEDIATE = 4,
	DMUS_PMSGF_TOOL_QUEUE     = 8,
	DMUS_PMSGF_TOOL_ATTIME    = 0x10,
	DMUS_PMSGF_TOOL_FLUSH     = 0x20,
	DMUS_PMSGF_LOCKTOREFTIME  = 0x40,
	DMUS_PMSGF_DX8            = 0x80
} DMUS_PMSGF_FLAGS;

typedef enum enumDMUS_PMSGT_TYPES {
	DMUS_PMSGT_MIDI             = 0x00,
	DMUS_PMSGT_NOTE             = 0x01,
	DMUS_PMSGT_SYSEX            = 0x02,
	DMUS_PMSGT_NOTIFICATION     = 0x03,
	DMUS_PMSGT_TEMPO            = 0x04,
	DMUS_PMSGT_CURVE            = 0x05,
	DMUS_PMSGT_TIMESIG          = 0x06,
	DMUS_PMSGT_PATCH            = 0x07,
	DMUS_PMSGT_TRANSPOSE        = 0x08,
	DMUS_PMSGT_CHANNEL_PRIORITY = 0x09,
	DMUS_PMSGT_STOP             = 0x0A,
	DMUS_PMSGT_DIRTY            = 0x0B,
	DMUS_PMSGT_WAVE             = 0x0C,
	DMUS_PMSGT_LYRIC            = 0x0D,
	DMUS_PMSGT_SCRIPTLYRIC      = 0x0E,
	DMUS_PMSGT_USER             = 0xFF
} DMUS_PMSGT_TYPES;

typedef enum enumDMUS_SEGF_FLAGS {
	DMUS_SEGF_REFTIME             = 0x000040,   
	DMUS_SEGF_SECONDARY           = 0x000080,
	DMUS_SEGF_QUEUE               = 0x000100,
	DMUS_SEGF_CONTROL             = 0x000200,
	DMUS_SEGF_AFTERPREPARETIME    = 0x000400,
	DMUS_SEGF_GRID                = 0x000800,
	DMUS_SEGF_BEAT                = 0x001000,
	DMUS_SEGF_MEASURE             = 0x002000,
	DMUS_SEGF_DEFAULT             = 0x004000,
	DMUS_SEGF_NOINVALIDATE        = 0x008000,
	DMUS_SEGF_ALIGN               = 0x0010000,
	DMUS_SEGF_VALID_START_BEAT    = 0x0020000,
	DMUS_SEGF_VALID_START_GRID    = 0x0040000,
	DMUS_SEGF_VALID_START_TICK    = 0x0080000,
	DMUS_SEGF_AUTOTRANSITION      = 0x0100000,
	DMUS_SEGF_AFTERQUEUETIME      = 0x0200000,
	DMUS_SEGF_AFTERLATENCYTIME    = 0x0400000,
	DMUS_SEGF_SEGMENTEND          = 0x0800000,
	DMUS_SEGF_MARKER              = 0x01000000,
	DMUS_SEGF_TIMESIG_ALWAYS      = 0x02000000,
	DMUS_SEGF_USE_AUDIOPATH       = 0x04000000,
	DMUS_SEGF_VALID_START_MEASURE = 0x08000000,
	DMUS_SEGF_INVALIDATE_PRI      = 0x10000000
} DMUS_SEGF_FLAGS;

typedef enum enumDMUS_TIME_RESOLVE_FLAGS {
	DMUS_TIME_RESOLVE_AFTERPREPARETIME = DMUS_SEGF_AFTERPREPARETIME,
	DMUS_TIME_RESOLVE_AFTERQUEUETIME   = DMUS_SEGF_AFTERQUEUETIME,
	DMUS_TIME_RESOLVE_AFTERLATENCYTIME = DMUS_SEGF_AFTERLATENCYTIME,
	DMUS_TIME_RESOLVE_GRID             = DMUS_SEGF_GRID,
	DMUS_TIME_RESOLVE_BEAT             = DMUS_SEGF_BEAT,
	DMUS_TIME_RESOLVE_MEASURE          = DMUS_SEGF_MEASURE,
	DMUS_TIME_RESOLVE_MARKER           = DMUS_SEGF_MARKER,
	DMUS_TIME_RESOLVE_SEGMENTEND       = DMUS_SEGF_SEGMENTEND,
} DMUS_TIME_RESOLVE_FLAGS;

typedef enum enumDMUS_CHORDKEYF_FLAGS {
	DMUS_CHORDKEYF_SILENT = 0x1,
} DMUS_CHORDKEYF_FLAGS;

typedef enum enumDMUS_NOTEF_FLAGS {
	DMUS_NOTEF_NOTEON               = 0x01,
	/* DX8 */
	DMUS_NOTEF_NOINVALIDATE         = 0x02,
	DMUS_NOTEF_NOINVALIDATE_INSCALE = 0x04,
	DMUS_NOTEF_NOINVALIDATE_INCHORD = 0x08,
	DMUS_NOTEF_REGENERATE           = 0x10,
} DMUS_NOTEF_FLAGS;

typedef enum enumDMUS_PLAYMODE_FLAGS {
	DMUS_PLAYMODE_KEY_ROOT        = 0x01,
	DMUS_PLAYMODE_CHORD_ROOT      = 0x02,
	DMUS_PLAYMODE_SCALE_INTERVALS = 0x04,
	DMUS_PLAYMODE_CHORD_INTERVALS = 0x08,
	DMUS_PLAYMODE_NONE            = 0x10,
} DMUS_PLAYMODE_FLAGS;

typedef enum enumDMUS_CURVE_FLAGS {
	DMUS_CURVE_RESET              = 0x1,
	DMUS_CURVE_START_FROM_CURRENT = 0x2
} DMUS_CURVE_FLAGS;

enum { 
	DMUS_CURVES_LINEAR  = 0x0,
	DMUS_CURVES_INSTANT = 0x1,
	DMUS_CURVES_EXP     = 0x2,
	DMUS_CURVES_LOG     = 0x3,
	DMUS_CURVES_SINE    = 0x4
};


/*****************************************************************************
 * Structures
 */
/* typedef definitions */
typedef struct _DMUS_PMSG                  DMUS_PMSG,                  *LPDMUS_PMSG;
typedef struct _DMUS_AUDIOPARAMS           DMUS_AUDIOPARAMS,           *LPDMUS_AUDIOPARAMS;
typedef struct _DMUS_SUBCHORD              DMUS_SUBCHORD,              *LPDMUS_SUBCHORD;
typedef struct _DMUS_CHORD_KEY             DMUS_CHORD_KEY,             *LPDMUS_CHORD_KEY;
typedef struct _DMUS_NOTE_PMSG             DMUS_NOTE_PMSG,             *LPDMUS_NOTE_PMSG;
typedef struct _DMUS_MIDI_PMSG             DMUS_MIDI_PMSG,             *LPDMUS_MIDI_PMSG;
typedef struct _DMUS_PATCH_PMSG            DMUS_PATCH_PMSG,            *LPDMUS_PATCH_PMSG;
typedef struct _DMUS_TRANSPOSE_PMSG        DMUS_TRANSPOSE_PMSG,        *LPDMUS_TRANSPOSE_PMSG;
typedef struct _DMUS_CHANNEL_PRIORITY_PMSG DMUS_CHANNEL_PRIORITY_PMSG, *LPDMUS_CHANNEL_PRIORITY_PMSG;
typedef struct _DMUS_TEMPO_PMSG            DMUS_TEMPO_PMSG,            *LPDMUS_TEMPO_PMSG;
typedef struct _DMUS_SYSEX_PMSG            DMUS_SYSEX_PMSG,            *LPDMUS_SYSEX_PMSG;
typedef struct _DMUS_CURVE_PMSG            DMUS_CURVE_PMSG,            *LPDMUS_CURVE_PMSG;
typedef struct _DMUS_TIMESIG_PMSG          DMUS_TIMESIG_PMSG,          *LPDMUS_TIMESIG_PMSG;
typedef struct _DMUS_NOTIFICATION_PMSG     DMUS_NOTIFICATION_PMSG,     *LPDMUS_NOTIFICATION_PMSG;
typedef struct _DMUS_WAVE_PMSG             DMUS_WAVE_PMSG,             *LPDMUS_WAVE_PMSG;
typedef struct _DMUS_LYRIC_PMSG            DMUS_LYRIC_PMSG,            *LPDMUS_LYRIC_PMSG;
typedef struct _DMUS_VERSION               DMUS_VERSION,               *LPDMUS_VERSION;
typedef struct _DMUS_TIMESIGNATURE         DMUS_TIMESIGNATURE,         *LPDMUS_TIMESIGNATURE;
typedef struct _DMUS_VALID_START_PARAM     DMUS_VALID_START_PARAM,     *LPDMUS_VALID_START_PARAM;
typedef struct _DMUS_PLAY_MARKER_PARAM     DMUS_PLAY_MARKER_PARAM,     *LPDMUS_PLAY_MARKER_PARAM;
typedef struct _DMUS_OBJECTDESC            DMUS_OBJECTDESC,            *LPDMUS_OBJECTDESC;
typedef struct _DMUS_SCRIPT_ERRORINFO      DMUS_SCRIPT_ERRORINFO,      *LPDMUS_SCRIPT_ERRORINFO;
typedef struct _DMUS_COMMAND_PARAM         DMUS_COMMAND_PARAM,         *LPDMUS_COMMAND_PARAM;
typedef struct _DMUS_COMMAND_PARAM_2       DMUS_COMMAND_PARAM_2,       *LPDMUS_COMMAND_PARAM_2;
typedef struct _DMUS_BAND_PARAM            DMUS_BAND_PARAM,            *LPDMUS_BAND_PARAM;
typedef struct _DMUS_VARIATIONS_PARAM      DMUS_VARIATIONS_PARAM,      *LPDMUS_VARIATIONS_PARAM;

/* actual structures */
struct _DMUS_PMSG {
    DMUS_PMSG_PART
};

struct _DMUS_AUDIOPARAMS {
	DWORD dwSize;
	BOOL  fInitNow;
	DWORD dwValidData;
	DWORD dwFeatures;
	DWORD dwVoices;
	DWORD dwSampleRate;
	CLSID clsidDefaultSynth;
};

struct _DMUS_SUBCHORD {
	DWORD dwChordPattern;
	DWORD dwScalePattern;
	DWORD dwInversionPoints;
	DWORD dwLevels;
	BYTE  bChordRoot;
	BYTE  bScaleRoot;
};

struct _DMUS_CHORD_KEY {
	WCHAR         wszName[16];
	WORD          wMeasure;
	BYTE          bBeat;
	BYTE          bSubChordCount;
	DMUS_SUBCHORD SubChordList[DMUS_MAXSUBCHORD];
	DWORD         dwScale;
	BYTE          bKey;
	BYTE          bFlags;
};

struct _DMUS_NOTE_PMSG {
	DMUS_PMSG_PART
	MUSIC_TIME mtDuration;
	WORD       wMusicValue;
	WORD       wMeasure;
	short      nOffset;
	BYTE       bBeat;
	BYTE       bGrid;
	BYTE       bVelocity;
	BYTE       bFlags;
	BYTE       bTimeRange;
	BYTE       bDurRange;
	BYTE       bVelRange;
	BYTE       bPlayModeFlags;
	BYTE       bSubChordLevel;
	BYTE       bMidiValue;
	char       cTranspose;
};

struct _DMUS_MIDI_PMSG {
	DMUS_PMSG_PART
	BYTE bStatus;
	BYTE bByte1;
	BYTE bByte2;
	BYTE bPad[1];
};

struct _DMUS_PATCH_PMSG {
	DMUS_PMSG_PART
	BYTE byInstrument;
	BYTE byMSB;
	BYTE byLSB;
	BYTE byPad[1];
};

struct _DMUS_TRANSPOSE_PMSG {
	DMUS_PMSG_PART
	short nTranspose;
	/* DX8 */
	WORD  wMergeIndex;
};

struct _DMUS_CHANNEL_PRIORITY_PMSG {
	DMUS_PMSG_PART
	DWORD dwChannelPriority;
};

struct _DMUS_TEMPO_PMSG {
	DMUS_PMSG_PART
	double  dblTempo;
};

struct _DMUS_SYSEX_PMSG {
	DMUS_PMSG_PART
	DWORD dwLen;
	BYTE  abData[1];
};

struct _DMUS_CURVE_PMSG {
	DMUS_PMSG_PART
	MUSIC_TIME mtDuration;
	MUSIC_TIME mtOriginalStart;
	MUSIC_TIME mtResetDuration;
	short      nStartValue;
	short      nEndValue;
	short      nResetValue;
	WORD       wMeasure;
	short      nOffset;
	BYTE       bBeat;
	BYTE       bGrid;
	BYTE       bType;
	BYTE       bCurveShape;
	BYTE       bCCData;
	BYTE       bFlags;
	/* DX8 */
	WORD       wParamType;
	WORD       wMergeIndex;
};

struct _DMUS_TIMESIG_PMSG {
	DMUS_PMSG_PART
	BYTE bBeatsPerMeasure;
	BYTE bBeat;
	WORD wGridsPerBeat;
};

struct _DMUS_NOTIFICATION_PMSG {
	DMUS_PMSG_PART
	GUID  guidNotificationType;
	DWORD dwNotificationOption;
	DWORD dwField1;
	DWORD dwField2;
};

struct _DMUS_WAVE_PMSG {
	DMUS_PMSG_PART    
	REFERENCE_TIME rtStartOffset;
	REFERENCE_TIME rtDuration;
	LONG           lOffset;
	LONG           lVolume;
	LONG           lPitch;
	BYTE           bFlags;
};

struct _DMUS_LYRIC_PMSG {
	DMUS_PMSG_PART    
	WCHAR wszString[1];
};

struct _DMUS_VERSION {
	DWORD dwVersionMS;
	DWORD dwVersionLS;
};

struct _DMUS_TIMESIGNATURE {
	MUSIC_TIME mtTime;
	BYTE       bBeatsPerMeasure;
	BYTE       bBeat;
	WORD       wGridsPerBeat;
};

struct _DMUS_VALID_START_PARAM {
	MUSIC_TIME mtTime;
};

struct _DMUS_PLAY_MARKER_PARAM {
	MUSIC_TIME mtTime;
};

struct _DMUS_OBJECTDESC {
	DWORD        dwSize;
	DWORD        dwValidData;
	GUID         guidObject;
	GUID         guidClass;
	FILETIME     ftDate;
	DMUS_VERSION vVersion;
	WCHAR        wszName[DMUS_MAX_NAME];
	WCHAR        wszCategory[DMUS_MAX_CATEGORY];
	WCHAR        wszFileName[DMUS_MAX_FILENAME];
	LONGLONG     llMemLength;
	BYTE        *pbMemData;
	IStream*     pStream;
};

struct _DMUS_SCRIPT_ERRORINFO {
	DWORD   dwSize;
	HRESULT hr;
	ULONG   ulLineNumber;
	LONG    ichCharPosition;
	WCHAR   wszSourceFile[DMUS_MAX_FILENAME];
	WCHAR   wszSourceComponent[DMUS_MAX_FILENAME];
	WCHAR   wszDescription[DMUS_MAX_FILENAME];
	WCHAR   wszSourceLineText[DMUS_MAX_FILENAME];
};

struct _DMUS_COMMAND_PARAM {
	BYTE bCommand;
	BYTE bGrooveLevel;
	BYTE bGrooveRange;
	BYTE bRepeatMode;
};

struct _DMUS_COMMAND_PARAM_2 {
	MUSIC_TIME mtTime;
	BYTE       bCommand;
	BYTE       bGrooveLevel;
	BYTE       bGrooveRange;
	BYTE       bRepeatMode;
};

struct _DMUS_BAND_PARAM {
	MUSIC_TIME       mtTimePhysical;
	struct IDirectMusicBand *pBand;
};

struct _DMUS_VARIATIONS_PARAM {
	DWORD  dwPChannelsUsed;
	DWORD* padwPChannels;
	DWORD* padwVariations;
};

interface IDirectMusicBand;
interface IDirectMusicObject;
interface IDirectMusicLoader;
interface IDirectMusicLoader8;
interface IDirectMusicGetLoader;
interface IDirectMusicSegment;
interface IDirectMusicSegment8;
interface IDirectMusicSegmentState;
interface IDirectMusicSegmentState8;
interface IDirectMusicAudioPath;
interface IDirectMusicPerformance;
interface IDirectMusicPerformance8;
interface IDirectMusicGraph;
interface IDirectMusicStyle;
interface IDirectMusicStyle8;
interface IDirectMusicChordMap;
interface IDirectMusicComposer;
interface IDirectMusicPatternTrack;
interface IDirectMusicScript;
interface IDirectMusicContainer;

[local, object, uuid(d2ac28c0-b39b-11d1-8704-00600893b1bd)]
interface IDirectMusicBand : IUnknown
{
    HRESULT CreateSegment(IDirectMusicSegment **ppSegment);
    HRESULT Download(IDirectMusicPerformance *pPerformance);
    HRESULT Unload(IDirectMusicPerformance *pPerformance);
};

[local, object, uuid(d2ac28b5-b39b-11d1-8704-00600893b1bd)]
interface IDirectMusicObject : IUnknown
{
    HRESULT GetDescriptor(LPDMUS_OBJECTDESC pDesc);
    HRESULT SetDescriptor(LPDMUS_OBJECTDESC pDesc);
    HRESULT ParseDescriptor(LPSTREAM pStream, LPDMUS_OBJECTDESC pDesc);
};

[local, object, uuid(2ffaaca2-5dca-11d2-afa6-00aa0024d8b6)]
interface IDirectMusicLoader : IUnknown
{
    HRESULT GetObject(LPDMUS_OBJECTDESC pDesc, REFIID riid, LPVOID *ppv);
    HRESULT SetObject(LPDMUS_OBJECTDESC pDesc);
    HRESULT SetSearchDirectory(REFGUID rguidClass, WCHAR *pwzPath, BOOL fClear);
    HRESULT ScanDirectory(REFGUID rguidClass, WCHAR *pwzFileExtension, WCHAR *pwzScanFileName);
    HRESULT CacheObject(IDirectMusicObject *pObject);
    HRESULT ReleaseObject(IDirectMusicObject *pObject);
    HRESULT ClearCache(REFGUID rguidClass);
    HRESULT EnableCache(REFGUID rguidClass, BOOL fEnable);
    HRESULT EnumObject(REFGUID rguidClass, DWORD dwIndex, LPDMUS_OBJECTDESC pDesc);
};

[local, object, uuid(19e7c08c-0a44-4e6a-a116-595a7cd5de8c)]
interface IDirectMusicLoader8 : IDirectMusicLoader
{
    void CollectGarbage();
    HRESULT ReleaseObjectByUnknown(IUnknown *pObject);
    HRESULT LoadObjectFromFile(REFGUID rguidClassID, REFIID iidInterfaceID, WCHAR *pwzFilePath, void **ppObject);
};

[local, object, uuid(68a04844-d13d-11d1-afa6-00aa0024d8b6)]
interface IDirectMusicGetLoader : IUnknown
{
    HRESULT GetLoader(IDirectMusicLoader **ppLoader);
};

[local, object, uuid(f96029a2-4282-11d2-8717-00600893b1bd)]
interface IDirectMusicSegment : IUnknown
{
    HRESULT GetLength(MUSIC_TIME *pmtLength);
    HRESULT SetLength(MUSIC_TIME mtLength);
    HRESULT GetRepeats(DWORD *pdwRepeats);
    HRESULT SetRepeats(DWORD dwRepeats);
    HRESULT GetDefaultResolution(DWORD *pdwResolution);
    HRESULT SetDefaultResolution(DWORD dwResolution);
    HRESULT GetTrack(REFGUID rguidType, DWORD dwGroupBits, DWORD dwIndex, IDirectMusicTrack **ppTrack);
    HRESULT GetTrackGroup(IDirectMusicTrack *pTrack, DWORD *pdwGroupBits);
    HRESULT InsertTrack(IDirectMusicTrack *pTrack, DWORD dwGroupBits);
    HRESULT RemoveTrack(IDirectMusicTrack *pTrack);
    HRESULT InitPlay(IDirectMusicSegmentState **ppSegState, IDirectMusicPerformance *pPerformance, DWORD  dwFlags);
    HRESULT GetGraph(IDirectMusicGraph **ppGraph);
    HRESULT SetGraph(IDirectMusicGraph *pGraph);
    HRESULT AddNotificationType(REFGUID rguidNotificationType);
    HRESULT RemoveNotificationType(REFGUID rguidNotificationType);
    HRESULT GetParam(REFGUID rguidType, DWORD dwGroupBits, DWORD dwIndex, MUSIC_TIME mtTime, MUSIC_TIME *pmtNext, void *pParam);
    HRESULT SetParam(REFGUID rguidType, DWORD dwGroupBits, DWORD dwIndex, MUSIC_TIME mtTime, void *pParam);
    HRESULT Clone(MUSIC_TIME mtStart, MUSIC_TIME mtEnd, IDirectMusicSegment **ppSegment);
    HRESULT SetStartPoint(MUSIC_TIME mtStart);
    HRESULT GetStartPoint(MUSIC_TIME *pmtStart);
    HRESULT SetLoopPoints(MUSIC_TIME mtStart, MUSIC_TIME mtEnd);
    HRESULT GetLoopPoints(MUSIC_TIME *pmtStart, MUSIC_TIME *pmtEnd);
    HRESULT SetPChannelsUsed(DWORD dwNumPChannels, DWORD *paPChannels);
};

cpp_quote("DEFINE_GUID(IID_IDirectMusicSegment2,                      0xd38894d1,0xc052,0x11d2,0x87,0x2f,0x00,0x60,0x08,0x93,0xb1,0xbd);")
[local, object, uuid(c6784488-41a3-418f-aa15-b35093ba42d4)]
interface IDirectMusicSegment8 : IDirectMusicSegment
{
    HRESULT SetTrackConfig(REFGUID rguidTrackClassID, DWORD dwGroupBits, DWORD dwIndex, DWORD dwFlagsOn, DWORD dwFlagsOff);
    HRESULT GetAudioPathConfig(IUnknown **ppAudioPathConfig);
    HRESULT Compose(MUSIC_TIME mtTime, IDirectMusicSegment *pFromSegment, IDirectMusicSegment *pToSegment, IDirectMusicSegment **ppComposedSegment);
    HRESULT Download(IUnknown *pAudioPath);
    HRESULT Unload(IUnknown *pAudioPath);
};

[local, object, uuid(a3afdcc7-d3ee-11d1-bc8d-00a0c922e6eb)]
interface IDirectMusicSegmentState : IUnknown
{
    HRESULT GetRepeats(DWORD *pdwRepeats);
    HRESULT GetSegment(IDirectMusicSegment **ppSegment);
    HRESULT GetStartTime(MUSIC_TIME *pmtStart);
    HRESULT GetSeek(MUSIC_TIME *pmtSeek);
    HRESULT GetStartPoint(MUSIC_TIME *pmtStart);
};

[local, object, uuid(a50e4730-0ae4-48a7-9839-bc04bfe07772)]
interface IDirectMusicSegmentState8 : IDirectMusicSegmentState
{
    HRESULT SetTrackConfig(REFGUID rguidTrackClassID, DWORD dwGroupBits, DWORD dwIndex, DWORD dwFlagsOn, DWORD dwFlagsOff);
    HRESULT GetObjectInPath(DWORD dwPChannel, DWORD dwStage, DWORD dwBuffer, REFGUID guidObject, DWORD dwIndex, REFGUID iidInterface, void **ppObject);
};

[local, object, uuid(c87631f5-23be-4986-8836-05832fcc48f9)]
interface IDirectMusicAudioPath : IUnknown
{
    HRESULT GetObjectInPath(DWORD dwPChannel, DWORD dwStage, DWORD dwBuffer, REFGUID guidObject, DWORD dwIndex, REFGUID iidInterface, void **ppObject);
    HRESULT Activate(BOOL fActivate);
    HRESULT SetVolume(LONG lVolume, DWORD dwDuration);
    HRESULT ConvertPChannel(DWORD dwPChannelIn, DWORD *pdwPChannelOut);
};

[local, object, uuid(07d43d03-6523-11d2-871d-00600893b1bd)]
interface IDirectMusicPerformance : IUnknown
{
    HRESULT Init(IDirectMusic **ppDirectMusic, IDirectSound *pDirectSound, HWND hWnd);
    HRESULT PlaySegment(IDirectMusicSegment *pSegment, DWORD dwFlags, __int64 i64StartTime, IDirectMusicSegmentState **ppSegmentState);
    HRESULT Stop(IDirectMusicSegment *pSegment, IDirectMusicSegmentState *pSegmentState, MUSIC_TIME mtTime, DWORD dwFlags);
    HRESULT GetSegmentState(IDirectMusicSegmentState **ppSegmentState, MUSIC_TIME mtTime);
    HRESULT SetPrepareTime(DWORD dwMilliSeconds);
    HRESULT GetPrepareTime(DWORD *pdwMilliSeconds);
    HRESULT SetBumperLength(DWORD dwMilliSeconds);
    HRESULT GetBumperLength(DWORD *pdwMilliSeconds);
    HRESULT SendPMsg(DMUS_PMSG *pPMSG);
    HRESULT MusicToReferenceTime(MUSIC_TIME mtTime, REFERENCE_TIME *prtTime);
    HRESULT ReferenceToMusicTime(REFERENCE_TIME rtTime, MUSIC_TIME *pmtTime);
    HRESULT IsPlaying(IDirectMusicSegment *pSegment, IDirectMusicSegmentState *pSegState);
    HRESULT GetTime(REFERENCE_TIME *prtNow, MUSIC_TIME *pmtNow);
    HRESULT AllocPMsg(ULONG cb, DMUS_PMSG **ppPMSG);
    HRESULT FreePMsg(DMUS_PMSG *pPMSG);
    HRESULT GetGraph(IDirectMusicGraph **ppGraph);
    HRESULT SetGraph(IDirectMusicGraph *pGraph);
    HRESULT SetNotificationHandle(HANDLE hNotification, REFERENCE_TIME rtMinimum);
    HRESULT GetNotificationPMsg(DMUS_NOTIFICATION_PMSG **ppNotificationPMsg);
    HRESULT AddNotificationType(REFGUID rguidNotificationType);
    HRESULT RemoveNotificationType(REFGUID rguidNotificationType);
    HRESULT AddPort(IDirectMusicPort *pPort);
    HRESULT RemovePort(IDirectMusicPort *pPort);
    HRESULT AssignPChannelBlock(DWORD dwBlockNum, IDirectMusicPort *pPort, DWORD dwGroup);
    HRESULT AssignPChannel(DWORD dwPChannel, IDirectMusicPort *pPort, DWORD dwGroup, DWORD dwMChannel);
    HRESULT PChannelInfo(DWORD dwPChannel, IDirectMusicPort **ppPort, DWORD *pdwGroup, DWORD *pdwMChannel);
    HRESULT DownloadInstrument(IDirectMusicInstrument *pInst, DWORD dwPChannel, IDirectMusicDownloadedInstrument **ppDownInst, DMUS_NOTERANGE *pNoteRanges, DWORD dwNumNoteRanges, IDirectMusicPort **ppPort, DWORD *pdwGroup, DWORD *pdwMChannel);
    HRESULT Invalidate(MUSIC_TIME mtTime, DWORD dwFlags);
    HRESULT GetParam(REFGUID rguidType, DWORD dwGroupBits, DWORD dwIndex, MUSIC_TIME mtTime, MUSIC_TIME *pmtNext, void *pParam);
    HRESULT SetParam(REFGUID rguidType, DWORD dwGroupBits, DWORD dwIndex, MUSIC_TIME mtTime, void *pParam);
    HRESULT GetGlobalParam(REFGUID rguidType, void *pParam, DWORD dwSize);
    HRESULT SetGlobalParam(REFGUID rguidType, void *pParam, DWORD dwSize);
    HRESULT GetLatencyTime(REFERENCE_TIME *prtTime);
    HRESULT GetQueueTime(REFERENCE_TIME *prtTime);
    HRESULT AdjustTime(REFERENCE_TIME rtAmount);
    HRESULT CloseDown();
    HRESULT GetResolvedTime(REFERENCE_TIME rtTime, REFERENCE_TIME *prtResolved, DWORD dwTimeResolveFlags);
    HRESULT MIDIToMusic(BYTE bMIDIValue, DMUS_CHORD_KEY *pChord, BYTE bPlayMode, BYTE bChordLevel, WORD *pwMusicValue);
    HRESULT MusicToMIDI(WORD wMusicValue, DMUS_CHORD_KEY *pChord, BYTE bPlayMode, BYTE bChordLevel, BYTE *pbMIDIValue);
    HRESULT TimeToRhythm(MUSIC_TIME mtTime, DMUS_TIMESIGNATURE *pTimeSig, WORD *pwMeasure, BYTE *pbBeat, BYTE *pbGrid, short *pnOffset);
    HRESULT RhythmToTime(WORD wMeasure, BYTE bBeat, BYTE bGrid, short nOffset, DMUS_TIMESIGNATURE *pTimeSig, MUSIC_TIME *pmtTime);
};

cpp_quote("DEFINE_GUID(IID_IDirectMusicPerformance2,                  0x6fc2cae0,0xbc78,0x11d2,0xaf,0xa6,0x00,0xaa,0x00,0x24,0xd8,0xb6);")
[local, object, uuid(679c4137-c62e-4147-b2b4-9d569acb254c)]
interface IDirectMusicPerformance8 : IDirectMusicPerformance
{
    /*** IDirectMusicPerformance8 methods ***/
    HRESULT InitAudio(IDirectMusic **ppDirectMusic, IDirectSound **ppDirectSound, HWND hWnd, DWORD dwDefaultPathType, DWORD dwPChannelCount, DWORD dwFlags, DMUS_AUDIOPARAMS *pParams);
    HRESULT PlaySegmentEx(IUnknown *pSource, WCHAR *pwzSegmentName, IUnknown *pTransition, DWORD dwFlags, __int64 i64StartTime, IDirectMusicSegmentState **ppSegmentState, IUnknown *pFrom, IUnknown *pAudioPath);
    HRESULT StopEx(IUnknown *pObjectToStop, __int64 i64StopTime, DWORD dwFlags);
    HRESULT ClonePMsg(DMUS_PMSG *pSourcePMSG, DMUS_PMSG **ppCopyPMSG);
    HRESULT CreateAudioPath(IUnknown *pSourceConfig, BOOL fActivate, IDirectMusicAudioPath **ppNewPath);
    HRESULT CreateStandardAudioPath(DWORD dwType, DWORD dwPChannelCount, BOOL fActivate, IDirectMusicAudioPath **ppNewPath);
    HRESULT SetDefaultAudioPath(IDirectMusicAudioPath *pAudioPath);
    HRESULT GetDefaultAudioPath(IDirectMusicAudioPath **ppAudioPath);
    HRESULT GetParamEx(REFGUID rguidType, DWORD dwTrackID, DWORD dwGroupBits, DWORD dwIndex, MUSIC_TIME mtTime, MUSIC_TIME *pmtNext, void *pParam);
};

[local, object, uuid(2befc277-5497-11d2-bccb-00a0c922e6eb)]
interface IDirectMusicGraph : IUnknown
{
    HRESULT StampPMsg(DMUS_PMSG *pPMSG);
    HRESULT InsertTool(IDirectMusicTool *pTool, DWORD *pdwPChannels, DWORD cPChannels, LONG lIndex);
    HRESULT GetTool(DWORD dwIndex, IDirectMusicTool **ppTool);
    HRESULT RemoveTool(IDirectMusicTool *pTool);
};

[local, object, uuid(d2ac28bd-b39b-11d1-8704-00600893b1bd)]
interface IDirectMusicStyle : IUnknown
{
    HRESULT GetBand(WCHAR *pwszName, IDirectMusicBand **ppBand);
    HRESULT EnumBand(DWORD dwIndex, WCHAR *pwszName);
    HRESULT GetDefaultBand(IDirectMusicBand **ppBand);
    HRESULT EnumMotif(DWORD dwIndex, WCHAR *pwszName);
    HRESULT GetMotif(WCHAR *pwszName, IDirectMusicSegment **ppSegment);
    HRESULT GetDefaultChordMap(IDirectMusicChordMap **ppChordMap);
    HRESULT EnumChordMap(DWORD dwIndex, WCHAR *pwszName);
    HRESULT GetChordMap(WCHAR *pwszName, IDirectMusicChordMap **ppChordMap);
    HRESULT GetTimeSignature(DMUS_TIMESIGNATURE *pTimeSig);
    HRESULT GetEmbellishmentLength(DWORD dwType, DWORD dwLevel, DWORD *pdwMin, DWORD *pdwMax);
    HRESULT GetTempo(double *pTempo);
};

[local, object, uuid(fd24ad8a-a260-453d-bf50-6f9384f70985)]
interface IDirectMusicStyle8 : IDirectMusicStyle
{
    HRESULT EnumPattern(DWORD dwIndex, DWORD dwPatternType, WCHAR *pwszName);
};

[local, object, uuid(d2ac28be-b39b-11d1-8704-00600893b1bd)]
interface IDirectMusicChordMap : IUnknown
{
    HRESULT GetScale(DWORD *pdwScale);
};

[local, object, uuid(d2ac28bf-b39b-11d1-8704-00600893b1bd)]
interface IDirectMusicComposer : IUnknown
{
    HRESULT ComposeSegmentFromTemplate(IDirectMusicStyle *pStyle, IDirectMusicSegment *pTemplate, WORD wActivity, IDirectMusicChordMap *pChordMap, IDirectMusicSegment **ppSegment);
    HRESULT ComposeSegmentFromShape(IDirectMusicStyle *pStyle, WORD wNumMeasures, WORD wShape, WORD wActivity, BOOL fIntro, BOOL fEnd, IDirectMusicChordMap *pChordMap, IDirectMusicSegment **ppSegment);
    HRESULT ComposeTransition(IDirectMusicSegment *pFromSeg, IDirectMusicSegment *pToSeg, MUSIC_TIME mtTime, WORD wCommand, DWORD dwFlags, IDirectMusicChordMap *pChordMap, IDirectMusicSegment **ppTransSeg);
    HRESULT AutoTransition(IDirectMusicPerformance *pPerformance, IDirectMusicSegment *pToSeg, WORD wCommand, DWORD dwFlags, IDirectMusicChordMap *pChordMap, IDirectMusicSegment **ppTransSeg, IDirectMusicSegmentState **ppToSegState, IDirectMusicSegmentState **ppTransSegState);
    HRESULT ComposeTemplateFromShape(WORD wNumMeasures, WORD wShape, BOOL fIntro, BOOL fEnd, WORD wEndLength, IDirectMusicSegment **ppTemplate);
    HRESULT ChangeChordMap(IDirectMusicSegment *pSegment, BOOL fTrackScale, IDirectMusicChordMap *pChordMap);
};

[local, object, uuid(51c22e10-b49f-46fc-bec2-e6288fb9ede6)]
interface IDirectMusicPatternTrack : IUnknown
{
    HRESULT CreateSegment(IDirectMusicStyle *pStyle, IDirectMusicSegment **ppSegment);
    HRESULT SetVariation(IDirectMusicSegmentState *pSegState, DWORD dwVariationFlags, DWORD dwPart);
    HRESULT SetPatternByName(IDirectMusicSegmentState *pSegState, WCHAR *wszName, IDirectMusicStyle *pStyle, DWORD dwPatternType, DWORD *pdwLength);
};

[local, object, uuid(2252373a-5814-489b-8209-31fedebaf137)]
interface IDirectMusicScript : IUnknown
{
    HRESULT Init(IDirectMusicPerformance *pPerformance, DMUS_SCRIPT_ERRORINFO *pErrorInfo);
    HRESULT CallRoutine(WCHAR *pwszRoutineName, DMUS_SCRIPT_ERRORINFO *pErrorInfo);
    HRESULT SetVariableVariant(WCHAR *pwszVariableName, VARIANT varValue, BOOL fSetRef, DMUS_SCRIPT_ERRORINFO *pErrorInfo);
    HRESULT GetVariableVariant(WCHAR *pwszVariableName, VARIANT *pvarValue, DMUS_SCRIPT_ERRORINFO *pErrorInfo);
    HRESULT SetVariableNumber(WCHAR *pwszVariableName, LONG lValue, DMUS_SCRIPT_ERRORINFO *pErrorInfo);
    HRESULT GetVariableNumber(WCHAR *pwszVariableName, LONG *plValue, DMUS_SCRIPT_ERRORINFO *pErrorInfo);
    HRESULT SetVariableObject(WCHAR *pwszVariableName, IUnknown *punkValue, DMUS_SCRIPT_ERRORINFO *pErrorInfo);
    HRESULT GetVariableObject(WCHAR *pwszVariableName, REFIID riid, LPVOID *ppv, DMUS_SCRIPT_ERRORINFO *pErrorInfo);
    HRESULT EnumRoutine(DWORD dwIndex, WCHAR *pwszName);
    HRESULT EnumVariable(DWORD dwIndex, WCHAR *pwszName);
};

[local, object, uuid(9301e386-1f22-11d3-8226-d2fa76255d47)]
interface IDirectMusicContainer : IUnknown
{
    HRESULT EnumObject(REFGUID rguidClass, DWORD dwIndex, LPDMUS_OBJECTDESC pDesc, WCHAR *pwszAlias);
};

/* IIDs of unchanged interfaces */
#define IID_IDirectMusicAudioPath8    IID_IDirectMusicAudioPath
#define IID_IDirectMusicBand8         IID_IDirectMusicBand
#define IID_IDirectMusicChordMap8     IID_IDirectMusicChordMap
#define IID_IDirectMusicComposer8     IID_IDirectMusicComposer
#define IID_IDirectMusicContainer8    IID_IDirectMusicContainer
#define IID_IDirectMusicGetLoader8    IID_IDirectMusicGetLoader
#define IID_IDirectMusicGraph8        IID_IDirectMusicGraph
#define IID_IDirectMusicObject8       IID_IDirectMusicObject
#define IID_IDirectMusicPatternTrack8 IID_IDirectMusicPatternTrack
#define IID_IDirectMusicScript8       IID_IDirectMusicScript

/* typedef definitions */
typedef IDirectMusicBand *LPDIRECTMUSICBAND;
typedef IDirectMusicBand         IDirectMusicBand8,         *LPDIRECTMUSICBAND8;
typedef IDirectMusicObject *LPDIRECTMUSICOBJECT;
typedef IDirectMusicObject       IDirectMusicObject8,       *LPDIRECTMUSICOBJECT8;
typedef IDirectMusicLoader *LPDIRECTMUSICLOADER;
typedef IDirectMusicLoader8 *LPDIRECTMUSICLOADER8;
typedef IDirectMusicGetLoader *LPDIRECTMUSICGETLOADER;
typedef IDirectMusicGetLoader    IDirectMusicGetLoader8,    *LPDIRECTMUSICGETLOADER8;
typedef IDirectMusicAudioPath *LPDIRECTMUSICAUDIOPATH;
typedef IDirectMusicAudioPath    IDirectMusicAudioPath8,    *LPDIRECTMUSICAUDIOPATH8;
typedef IDirectMusicStyle *LPDIRECTMUSICSTYLE;
typedef IDirectMusicStyle8 *LPDIRECTMUSICSTYLE8;
typedef IDirectMusicChordMap *LPDIRECTMUSICCHORDMAP;
typedef IDirectMusicChordMap     IDirectMusicChordMap8,     *LPDIRECTMUSICCHORDMAP8;
typedef IDirectMusicComposer *LPDIRECTMUSICCOMPOSER;
typedef IDirectMusicComposer     IDirectMusicComposer8,     *LPDIRECTMUSICCOMPOSER8;
typedef IDirectMusicPatternTrack *LPDIRECTMUSICPATTERNTRACK;
typedef IDirectMusicPatternTrack IDirectMusicPatternTrack8, *LPDIRECTMUSICPATTERNTRACK8;
typedef IDirectMusicScript *LPDIRECTMUSICSCRIPT;
typedef IDirectMusicScript       IDirectMusicScript8,       *LPDIRECTMUSICSCRIPT8;
typedef IDirectMusicContainer *LPDIRECTMUSICCONTAINER;
typedef IDirectMusicContainer    IDirectMusicContainer8,    *LPDIRECTMUSICCONTAINER8;
typedef IDirectMusicGraph *LPDIRECTMUSICGRAPH;

/* RPC declarations */
typedef IDirectMusicBand   *LPDMUS_BAND;
typedef IDirectMusicLoader *LPDMUS_LOADER;
typedef IDirectMusicObject *LPDMUS_OBJECT;
