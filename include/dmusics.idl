/*
 *  DirectMusic Software Synth Definitions
 *
 *  Copyright (C) 2003-2004 Rok Mandeljc
 *
 *  This program is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License as published by the Free Software Foundation; either
 *  version 2.1 of the License, or (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public
 *  License along with this program; if not, write to the Free Software
 *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA
 */

import "unknwn.idl";
import "objidl.idl";
import "wtypes.idl";
import "mmreg.h";

#ifndef REFERENCE_TIME_DEFINED
#define REFERENCE_TIME_DEFINED
typedef LONGLONG REFERENCE_TIME;
#endif

cpp_quote("#include \"dmusicc.h\"")

typedef ULONGLONG SAMPLE_POSITION;
typedef ULONGLONG SAMPLE_TIME;
typedef struct _DMUS_PORTPARAMS8 *LPDMUS_PORTPARAMS;
typedef struct _DMUS_SYNTHSTATS *LPDMUS_SYNTHSTATS;
typedef struct _DMUS_PORTCAPS *LPDMUS_PORTCAPS;
interface IReferenceClock;
interface IDirectSound;
interface IDirectSoundBuffer;

cpp_quote("#define REGSTR_PATH_SOFTWARESYNTHS \"Software\\\\Microsoft\\\\DirectMusic\\\\SoftwareSynths\"")

cpp_quote("DEFINE_GUID(GUID_DMUS_PROP_SetSynthSink,   0x0a3a5ba5,0x37b6,0x11d2,0xb9,0xf9,0x00,0x00,0xf8,0x75,0xac,0x12);")
cpp_quote("DEFINE_GUID(GUID_DMUS_PROP_SinkUsesDSound, 0xbe208857,0x8952,0x11d2,0xba,0x1c,0x00,0x00,0xf8,0x75,0xac,0x12);")

cpp_quote("#define REFRESH_F_LASTBUFFER        0x1")

typedef struct _DMUS_VOICE_STATE
{
	BOOL            bExists;
	SAMPLE_POSITION spPosition;
} DMUS_VOICE_STATE, *LPDMUS_VOICE_STATE; 

[local, object, uuid(09823661-5c85-11d2-afa6-00aa0024d8b6)]
interface IDirectMusicSynth : IUnknown
{
    HRESULT Open(LPDMUS_PORTPARAMS pPortParams);
    HRESULT Close();
    HRESULT SetNumChannelGroups(DWORD dwGroups);
    HRESULT Download(HANDLE *phDownload, LPVOID pvData, BOOL *pbFree);
    HRESULT Unload(HANDLE hDownload, HRESULT (__stdcall *lpFreeHandle)(HANDLE,HANDLE), HANDLE hUserData);
    HRESULT PlayBuffer(REFERENCE_TIME rt, BYTE *pbBuffer, DWORD cbBuffer);
    HRESULT GetRunningStats(LPDMUS_SYNTHSTATS pStats);
    HRESULT GetPortCaps(LPDMUS_PORTCAPS pCaps);
    HRESULT SetMasterClock(IReferenceClock *pClock);
    HRESULT GetLatencyClock(IReferenceClock **ppClock);
    HRESULT Activate(BOOL fEnable);
    HRESULT SetSynthSink(struct IDirectMusicSynthSink *pSynthSink);
    HRESULT Render(short *pBuffer, DWORD dwLength, LONGLONG llPosition);
    HRESULT SetChannelPriority(DWORD dwChannelGroup, DWORD dwChannel, DWORD dwPriority);
    HRESULT GetChannelPriority(DWORD dwChannelGroup, DWORD dwChannel, LPDWORD pdwPriority);
    HRESULT GetFormat(WAVEFORMATEX *pWaveFormatEx, LPDWORD pdwWaveFormatExSiz);
    HRESULT GetAppend(DWORD *pdwAppend);
};
typedef IDirectMusicSynth *LPDIRECTMUSICSYNTH;

[local, object, uuid(53cab625-2711-4c9f-9de7-1b7f925f6fc8)]
interface IDirectMusicSynth8 : IDirectMusicSynth
{
    HRESULT PlayVoice(REFERENCE_TIME rt, DWORD dwVoiceId, DWORD dwChannelGroup, DWORD dwChannel, DWORD dwDLId, LONG prPitch, LONG vrVolume, SAMPLE_TIME stVoiceStart, SAMPLE_TIME stLoopStart, SAMPLE_TIME stLoopEnd);
    HRESULT StopVoice(REFERENCE_TIME rt, DWORD dwVoiceId);
    HRESULT GetVoiceState(DWORD dwVoice[], DWORD cbVoice, DMUS_VOICE_STATE dwVoiceState[]);
    HRESULT Refresh(DWORD dwDownloadID, DWORD dwFlags);
    HRESULT AssignChannelToBuses(DWORD dwChannelGroup, DWORD dwChannel, LPDWORD pdwBuses, DWORD cBuses);
};
typedef IDirectMusicSynth8 *LPDIRECTMUSICSYNTH8;

[local, object, uuid(09823663-5c85-11d2-afa6-00aa0024d8b6)]
interface IDirectMusicSynthSink : IUnknown
{
    HRESULT Init(IDirectMusicSynth *pSynth);
    HRESULT SetMasterClock(IReferenceClock *pClock);
    HRESULT GetLatencyClock(IReferenceClock **ppClock);
    HRESULT Activate(BOOL fEnable);
    HRESULT SampleToRefTime(LONGLONG llSampleTime, REFERENCE_TIME *prfTime);
    HRESULT RefTimeToSample(REFERENCE_TIME rfTime, LONGLONG *pllSampleTime);
    HRESULT SetDirectSound(IDirectSound *pDirectSound, IDirectSoundBuffer *pDirectSoundBuffer);
    HRESULT GetDesiredBufferSize(LPDWORD pdwBufferSizeInSamples);
};
typedef IDirectMusicSynthSink *LPDIRECTMUSICSYNTHSINK;
